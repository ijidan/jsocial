// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: feed.proto

package proto_build

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	FeedCreate(ctx context.Context, in *FeedCreateRequest, opts ...grpc.CallOption) (*FeedCreateResponse, error)
	FeedEdit(ctx context.Context, in *FeedEditRequest, opts ...grpc.CallOption) (*FeedEditResponse, error)
	FeedLike(ctx context.Context, in *FeedLikeRequest, opts ...grpc.CallOption) (*FeedLikeResponse, error)
	FeedUnLike(ctx context.Context, in *FeedUnLikeRequest, opts ...grpc.CallOption) (*FeedUnLikeResponse, error)
	FeedGet(ctx context.Context, in *FeedGetRequest, opts ...grpc.CallOption) (*FeedGetResponse, error)
	FeedDelete(ctx context.Context, in *FeedDeleteRequest, opts ...grpc.CallOption) (*FeedDeleteResponse, error)
	FeedOwn(ctx context.Context, in *FeedOwnRequest, opts ...grpc.CallOption) (*FeedOwnResponse, error)
	FeedQuery(ctx context.Context, in *FeedQueryRequest, opts ...grpc.CallOption) (*FeedQueryResponse, error)
	FeedFollow(ctx context.Context, in *FeedFollowRequest, opts ...grpc.CallOption) (*FeedFollowResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) FeedCreate(ctx context.Context, in *FeedCreateRequest, opts ...grpc.CallOption) (*FeedCreateResponse, error) {
	out := new(FeedCreateResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedEdit(ctx context.Context, in *FeedEditRequest, opts ...grpc.CallOption) (*FeedEditResponse, error) {
	out := new(FeedEditResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedLike(ctx context.Context, in *FeedLikeRequest, opts ...grpc.CallOption) (*FeedLikeResponse, error) {
	out := new(FeedLikeResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedUnLike(ctx context.Context, in *FeedUnLikeRequest, opts ...grpc.CallOption) (*FeedUnLikeResponse, error) {
	out := new(FeedUnLikeResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedUnLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedGet(ctx context.Context, in *FeedGetRequest, opts ...grpc.CallOption) (*FeedGetResponse, error) {
	out := new(FeedGetResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedDelete(ctx context.Context, in *FeedDeleteRequest, opts ...grpc.CallOption) (*FeedDeleteResponse, error) {
	out := new(FeedDeleteResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedOwn(ctx context.Context, in *FeedOwnRequest, opts ...grpc.CallOption) (*FeedOwnResponse, error) {
	out := new(FeedOwnResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedOwn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedQuery(ctx context.Context, in *FeedQueryRequest, opts ...grpc.CallOption) (*FeedQueryResponse, error) {
	out := new(FeedQueryResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) FeedFollow(ctx context.Context, in *FeedFollowRequest, opts ...grpc.CallOption) (*FeedFollowResponse, error) {
	out := new(FeedFollowResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/FeedFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/feed.FeedService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations must embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	FeedCreate(context.Context, *FeedCreateRequest) (*FeedCreateResponse, error)
	FeedEdit(context.Context, *FeedEditRequest) (*FeedEditResponse, error)
	FeedLike(context.Context, *FeedLikeRequest) (*FeedLikeResponse, error)
	FeedUnLike(context.Context, *FeedUnLikeRequest) (*FeedUnLikeResponse, error)
	FeedGet(context.Context, *FeedGetRequest) (*FeedGetResponse, error)
	FeedDelete(context.Context, *FeedDeleteRequest) (*FeedDeleteResponse, error)
	FeedOwn(context.Context, *FeedOwnRequest) (*FeedOwnResponse, error)
	FeedQuery(context.Context, *FeedQueryRequest) (*FeedQueryResponse, error)
	FeedFollow(context.Context, *FeedFollowRequest) (*FeedFollowResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedFeedServiceServer()
}

// UnimplementedFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) FeedCreate(context.Context, *FeedCreateRequest) (*FeedCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedCreate not implemented")
}
func (UnimplementedFeedServiceServer) FeedEdit(context.Context, *FeedEditRequest) (*FeedEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedEdit not implemented")
}
func (UnimplementedFeedServiceServer) FeedLike(context.Context, *FeedLikeRequest) (*FeedLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedLike not implemented")
}
func (UnimplementedFeedServiceServer) FeedUnLike(context.Context, *FeedUnLikeRequest) (*FeedUnLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedUnLike not implemented")
}
func (UnimplementedFeedServiceServer) FeedGet(context.Context, *FeedGetRequest) (*FeedGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedGet not implemented")
}
func (UnimplementedFeedServiceServer) FeedDelete(context.Context, *FeedDeleteRequest) (*FeedDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedDelete not implemented")
}
func (UnimplementedFeedServiceServer) FeedOwn(context.Context, *FeedOwnRequest) (*FeedOwnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedOwn not implemented")
}
func (UnimplementedFeedServiceServer) FeedQuery(context.Context, *FeedQueryRequest) (*FeedQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedQuery not implemented")
}
func (UnimplementedFeedServiceServer) FeedFollow(context.Context, *FeedFollowRequest) (*FeedFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedFollow not implemented")
}
func (UnimplementedFeedServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFeedServiceServer) mustEmbedUnimplementedFeedServiceServer() {}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_FeedCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedCreate(ctx, req.(*FeedCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedEdit(ctx, req.(*FeedEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedLike(ctx, req.(*FeedLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedUnLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedUnLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedUnLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedUnLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedUnLike(ctx, req.(*FeedUnLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedGet(ctx, req.(*FeedGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedDelete(ctx, req.(*FeedDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedOwnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedOwn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedOwn(ctx, req.(*FeedOwnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedQuery(ctx, req.(*FeedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_FeedFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).FeedFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/FeedFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).FeedFollow(ctx, req.(*FeedFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.FeedService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeedCreate",
			Handler:    _FeedService_FeedCreate_Handler,
		},
		{
			MethodName: "FeedEdit",
			Handler:    _FeedService_FeedEdit_Handler,
		},
		{
			MethodName: "FeedLike",
			Handler:    _FeedService_FeedLike_Handler,
		},
		{
			MethodName: "FeedUnLike",
			Handler:    _FeedService_FeedUnLike_Handler,
		},
		{
			MethodName: "FeedGet",
			Handler:    _FeedService_FeedGet_Handler,
		},
		{
			MethodName: "FeedDelete",
			Handler:    _FeedService_FeedDelete_Handler,
		},
		{
			MethodName: "FeedOwn",
			Handler:    _FeedService_FeedOwn_Handler,
		},
		{
			MethodName: "FeedQuery",
			Handler:    _FeedService_FeedQuery_Handler,
		},
		{
			MethodName: "FeedFollow",
			Handler:    _FeedService_FeedFollow_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FeedService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
