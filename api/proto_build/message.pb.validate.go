// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message.proto

package proto_build

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TextMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextMessageMultiError, or
// nil if none found.
func (m *TextMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TextMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	if len(errors) > 0 {
		return TextMessageMultiError(errors)
	}

	return nil
}

// TextMessageMultiError is an error wrapping multiple validation errors
// returned by TextMessage.ValidateAll() if the designated constraints aren't met.
type TextMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextMessageMultiError) AllErrors() []error { return m }

// TextMessageValidationError is the validation error returned by
// TextMessage.Validate if the designated constraints aren't met.
type TextMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextMessageValidationError) ErrorName() string { return "TextMessageValidationError" }

// Error satisfies the builtin error interface
func (e TextMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextMessageValidationError{}

// Validate checks the field values on LocationMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LocationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationMessageMultiError, or nil if none found.
func (m *LocationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CoverImage

	// no validation rules for Lat

	// no validation rules for Lng

	// no validation rules for MapLink

	// no validation rules for Desc

	if len(errors) > 0 {
		return LocationMessageMultiError(errors)
	}

	return nil
}

// LocationMessageMultiError is an error wrapping multiple validation errors
// returned by LocationMessage.ValidateAll() if the designated constraints
// aren't met.
type LocationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMessageMultiError) AllErrors() []error { return m }

// LocationMessageValidationError is the validation error returned by
// LocationMessage.Validate if the designated constraints aren't met.
type LocationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationMessageValidationError) ErrorName() string { return "LocationMessageValidationError" }

// Error satisfies the builtin error interface
func (e LocationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationMessageValidationError{}

// Validate checks the field values on FaceMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FaceMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FaceMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FaceMessageMultiError, or
// nil if none found.
func (m *FaceMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *FaceMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Symbol

	if len(errors) > 0 {
		return FaceMessageMultiError(errors)
	}

	return nil
}

// FaceMessageMultiError is an error wrapping multiple validation errors
// returned by FaceMessage.ValidateAll() if the designated constraints aren't met.
type FaceMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FaceMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FaceMessageMultiError) AllErrors() []error { return m }

// FaceMessageValidationError is the validation error returned by
// FaceMessage.Validate if the designated constraints aren't met.
type FaceMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaceMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaceMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaceMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaceMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaceMessageValidationError) ErrorName() string { return "FaceMessageValidationError" }

// Error satisfies the builtin error interface
func (e FaceMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaceMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaceMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaceMessageValidationError{}

// Validate checks the field values on SoundMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SoundMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SoundMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SoundMessageMultiError, or
// nil if none found.
func (m *SoundMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *SoundMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Size

	// no validation rules for Seconds

	if len(errors) > 0 {
		return SoundMessageMultiError(errors)
	}

	return nil
}

// SoundMessageMultiError is an error wrapping multiple validation errors
// returned by SoundMessage.ValidateAll() if the designated constraints aren't met.
type SoundMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SoundMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SoundMessageMultiError) AllErrors() []error { return m }

// SoundMessageValidationError is the validation error returned by
// SoundMessage.Validate if the designated constraints aren't met.
type SoundMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoundMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoundMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoundMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoundMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoundMessageValidationError) ErrorName() string { return "SoundMessageValidationError" }

// Error satisfies the builtin error interface
func (e SoundMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoundMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoundMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoundMessageValidationError{}

// Validate checks the field values on ImageMessageItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImageMessageItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageMessageItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageMessageItemMultiError, or nil if none found.
func (m *ImageMessageItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageMessageItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Format

	// no validation rules for Size

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Url

	if len(errors) > 0 {
		return ImageMessageItemMultiError(errors)
	}

	return nil
}

// ImageMessageItemMultiError is an error wrapping multiple validation errors
// returned by ImageMessageItem.ValidateAll() if the designated constraints
// aren't met.
type ImageMessageItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMessageItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMessageItemMultiError) AllErrors() []error { return m }

// ImageMessageItemValidationError is the validation error returned by
// ImageMessageItem.Validate if the designated constraints aren't met.
type ImageMessageItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMessageItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMessageItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMessageItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMessageItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMessageItemValidationError) ErrorName() string { return "ImageMessageItemValidationError" }

// Error satisfies the builtin error interface
func (e ImageMessageItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMessageItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMessageItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMessageItemValidationError{}

// Validate checks the field values on ImageMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageMessageMultiError, or
// nil if none found.
func (m *ImageMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageMessageValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageMessageValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageMessageValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageMessageMultiError(errors)
	}

	return nil
}

// ImageMessageMultiError is an error wrapping multiple validation errors
// returned by ImageMessage.ValidateAll() if the designated constraints aren't met.
type ImageMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMessageMultiError) AllErrors() []error { return m }

// ImageMessageValidationError is the validation error returned by
// ImageMessage.Validate if the designated constraints aren't met.
type ImageMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMessageValidationError) ErrorName() string { return "ImageMessageValidationError" }

// Error satisfies the builtin error interface
func (e ImageMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMessageValidationError{}

// Validate checks the field values on FileMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileMessageMultiError, or
// nil if none found.
func (m *FileMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *FileMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Size

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return FileMessageMultiError(errors)
	}

	return nil
}

// FileMessageMultiError is an error wrapping multiple validation errors
// returned by FileMessage.ValidateAll() if the designated constraints aren't met.
type FileMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMessageMultiError) AllErrors() []error { return m }

// FileMessageValidationError is the validation error returned by
// FileMessage.Validate if the designated constraints aren't met.
type FileMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileMessageValidationError) ErrorName() string { return "FileMessageValidationError" }

// Error satisfies the builtin error interface
func (e FileMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileMessageValidationError{}

// Validate checks the field values on VideoMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoMessageMultiError, or
// nil if none found.
func (m *VideoMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Size

	// no validation rules for Seconds

	// no validation rules for Url

	// no validation rules for Format

	// no validation rules for ThumbUrl

	// no validation rules for ThumbSize

	// no validation rules for ThumbWidth

	// no validation rules for ThumbHeight

	// no validation rules for ThumbFormat

	if len(errors) > 0 {
		return VideoMessageMultiError(errors)
	}

	return nil
}

// VideoMessageMultiError is an error wrapping multiple validation errors
// returned by VideoMessage.ValidateAll() if the designated constraints aren't met.
type VideoMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMessageMultiError) AllErrors() []error { return m }

// VideoMessageValidationError is the validation error returned by
// VideoMessage.Validate if the designated constraints aren't met.
type VideoMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMessageValidationError) ErrorName() string { return "VideoMessageValidationError" }

// Error satisfies the builtin error interface
func (e VideoMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMessageValidationError{}

// Validate checks the field values on SendUserTextMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserTextMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserTextMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserTextMessageRequestMultiError, or nil if none found.
func (m *SendUserTextMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserTextMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserTextMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetText() == nil {
		err := SendUserTextMessageRequestValidationError{
			field:  "Text",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserTextMessageRequestValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserTextMessageRequestValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserTextMessageRequestValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserTextMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserTextMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserTextMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserTextMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserTextMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserTextMessageRequestMultiError) AllErrors() []error { return m }

// SendUserTextMessageRequestValidationError is the validation error returned
// by SendUserTextMessageRequest.Validate if the designated constraints aren't met.
type SendUserTextMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserTextMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserTextMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserTextMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserTextMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserTextMessageRequestValidationError) ErrorName() string {
	return "SendUserTextMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserTextMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserTextMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserTextMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserTextMessageRequestValidationError{}

// Validate checks the field values on SendUserTextMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserTextMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserTextMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserTextMessageResponseMultiError, or nil if none found.
func (m *SendUserTextMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserTextMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserTextMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserTextMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserTextMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserTextMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserTextMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserTextMessageResponseMultiError) AllErrors() []error { return m }

// SendUserTextMessageResponseValidationError is the validation error returned
// by SendUserTextMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserTextMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserTextMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserTextMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserTextMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserTextMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserTextMessageResponseValidationError) ErrorName() string {
	return "SendUserTextMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserTextMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserTextMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserTextMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserTextMessageResponseValidationError{}

// Validate checks the field values on SendUserLocationMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserLocationMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserLocationMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendUserLocationMessageRequestMultiError, or nil if none found.
func (m *SendUserLocationMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserLocationMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserLocationMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLocation() == nil {
		err := SendUserLocationMessageRequestValidationError{
			field:  "Location",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserLocationMessageRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserLocationMessageRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserLocationMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserLocationMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserLocationMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserLocationMessageRequest.ValidateAll()
// if the designated constraints aren't met.
type SendUserLocationMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserLocationMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserLocationMessageRequestMultiError) AllErrors() []error { return m }

// SendUserLocationMessageRequestValidationError is the validation error
// returned by SendUserLocationMessageRequest.Validate if the designated
// constraints aren't met.
type SendUserLocationMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserLocationMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserLocationMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserLocationMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserLocationMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserLocationMessageRequestValidationError) ErrorName() string {
	return "SendUserLocationMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserLocationMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserLocationMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserLocationMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserLocationMessageRequestValidationError{}

// Validate checks the field values on SendUserLocationMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserLocationMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserLocationMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendUserLocationMessageResponseMultiError, or nil if none found.
func (m *SendUserLocationMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserLocationMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserLocationMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserLocationMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserLocationMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendUserLocationMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserLocationMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserLocationMessageResponseMultiError) AllErrors() []error { return m }

// SendUserLocationMessageResponseValidationError is the validation error
// returned by SendUserLocationMessageResponse.Validate if the designated
// constraints aren't met.
type SendUserLocationMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserLocationMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserLocationMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserLocationMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserLocationMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserLocationMessageResponseValidationError) ErrorName() string {
	return "SendUserLocationMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserLocationMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserLocationMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserLocationMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserLocationMessageResponseValidationError{}

// Validate checks the field values on SendUserFaceMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserFaceMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserFaceMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserFaceMessageRequestMultiError, or nil if none found.
func (m *SendUserFaceMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserFaceMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserFaceMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFace() == nil {
		err := SendUserFaceMessageRequestValidationError{
			field:  "Face",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserFaceMessageRequestValidationError{
					field:  "Face",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserFaceMessageRequestValidationError{
					field:  "Face",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserFaceMessageRequestValidationError{
				field:  "Face",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserFaceMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserFaceMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserFaceMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserFaceMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserFaceMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserFaceMessageRequestMultiError) AllErrors() []error { return m }

// SendUserFaceMessageRequestValidationError is the validation error returned
// by SendUserFaceMessageRequest.Validate if the designated constraints aren't met.
type SendUserFaceMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserFaceMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserFaceMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserFaceMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserFaceMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserFaceMessageRequestValidationError) ErrorName() string {
	return "SendUserFaceMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserFaceMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserFaceMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserFaceMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserFaceMessageRequestValidationError{}

// Validate checks the field values on SendUserFaceMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserFaceMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserFaceMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserFaceMessageResponseMultiError, or nil if none found.
func (m *SendUserFaceMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserFaceMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserFaceMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserFaceMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserFaceMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserFaceMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserFaceMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserFaceMessageResponseMultiError) AllErrors() []error { return m }

// SendUserFaceMessageResponseValidationError is the validation error returned
// by SendUserFaceMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserFaceMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserFaceMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserFaceMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserFaceMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserFaceMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserFaceMessageResponseValidationError) ErrorName() string {
	return "SendUserFaceMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserFaceMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserFaceMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserFaceMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserFaceMessageResponseValidationError{}

// Validate checks the field values on SendUserSoundMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserSoundMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserSoundMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserSoundMessageRequestMultiError, or nil if none found.
func (m *SendUserSoundMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserSoundMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserSoundMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSound() == nil {
		err := SendUserSoundMessageRequestValidationError{
			field:  "Sound",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSound()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserSoundMessageRequestValidationError{
					field:  "Sound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserSoundMessageRequestValidationError{
					field:  "Sound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSound()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserSoundMessageRequestValidationError{
				field:  "Sound",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserSoundMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserSoundMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserSoundMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserSoundMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserSoundMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserSoundMessageRequestMultiError) AllErrors() []error { return m }

// SendUserSoundMessageRequestValidationError is the validation error returned
// by SendUserSoundMessageRequest.Validate if the designated constraints
// aren't met.
type SendUserSoundMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserSoundMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserSoundMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserSoundMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserSoundMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserSoundMessageRequestValidationError) ErrorName() string {
	return "SendUserSoundMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserSoundMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserSoundMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserSoundMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserSoundMessageRequestValidationError{}

// Validate checks the field values on SendUserSoundMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserSoundMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserSoundMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserSoundMessageResponseMultiError, or nil if none found.
func (m *SendUserSoundMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserSoundMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserSoundMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserSoundMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserSoundMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserSoundMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserSoundMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserSoundMessageResponseMultiError) AllErrors() []error { return m }

// SendUserSoundMessageResponseValidationError is the validation error returned
// by SendUserSoundMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserSoundMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserSoundMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserSoundMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserSoundMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserSoundMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserSoundMessageResponseValidationError) ErrorName() string {
	return "SendUserSoundMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserSoundMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserSoundMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserSoundMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserSoundMessageResponseValidationError{}

// Validate checks the field values on SendUserVideoMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserVideoMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserVideoMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserVideoMessageRequestMultiError, or nil if none found.
func (m *SendUserVideoMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserVideoMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserVideoMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVideo() == nil {
		err := SendUserVideoMessageRequestValidationError{
			field:  "Video",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserVideoMessageRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserVideoMessageRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserVideoMessageRequestValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserVideoMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserVideoMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserVideoMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserVideoMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserVideoMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserVideoMessageRequestMultiError) AllErrors() []error { return m }

// SendUserVideoMessageRequestValidationError is the validation error returned
// by SendUserVideoMessageRequest.Validate if the designated constraints
// aren't met.
type SendUserVideoMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserVideoMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserVideoMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserVideoMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserVideoMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserVideoMessageRequestValidationError) ErrorName() string {
	return "SendUserVideoMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserVideoMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserVideoMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserVideoMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserVideoMessageRequestValidationError{}

// Validate checks the field values on SendUserVideoMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserVideoMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserVideoMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserVideoMessageResponseMultiError, or nil if none found.
func (m *SendUserVideoMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserVideoMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserVideoMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserVideoMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserVideoMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserVideoMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserVideoMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserVideoMessageResponseMultiError) AllErrors() []error { return m }

// SendUserVideoMessageResponseValidationError is the validation error returned
// by SendUserVideoMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserVideoMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserVideoMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserVideoMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserVideoMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserVideoMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserVideoMessageResponseValidationError) ErrorName() string {
	return "SendUserVideoMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserVideoMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserVideoMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserVideoMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserVideoMessageResponseValidationError{}

// Validate checks the field values on SendUserImageMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserImageMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserImageMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserImageMessageRequestMultiError, or nil if none found.
func (m *SendUserImageMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserImageMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserImageMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetImage() == nil {
		err := SendUserImageMessageRequestValidationError{
			field:  "Image",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserImageMessageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserImageMessageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserImageMessageRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserImageMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserImageMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserImageMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserImageMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserImageMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserImageMessageRequestMultiError) AllErrors() []error { return m }

// SendUserImageMessageRequestValidationError is the validation error returned
// by SendUserImageMessageRequest.Validate if the designated constraints
// aren't met.
type SendUserImageMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserImageMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserImageMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserImageMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserImageMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserImageMessageRequestValidationError) ErrorName() string {
	return "SendUserImageMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserImageMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserImageMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserImageMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserImageMessageRequestValidationError{}

// Validate checks the field values on SendUserImageMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserImageMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserImageMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserImageMessageResponseMultiError, or nil if none found.
func (m *SendUserImageMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserImageMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserImageMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserImageMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserImageMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserImageMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserImageMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserImageMessageResponseMultiError) AllErrors() []error { return m }

// SendUserImageMessageResponseValidationError is the validation error returned
// by SendUserImageMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserImageMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserImageMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserImageMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserImageMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserImageMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserImageMessageResponseValidationError) ErrorName() string {
	return "SendUserImageMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserImageMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserImageMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserImageMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserImageMessageResponseValidationError{}

// Validate checks the field values on SendUserFileMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserFileMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserFileMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserFileMessageRequestMultiError, or nil if none found.
func (m *SendUserFileMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserFileMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToUserId() <= 0 {
		err := SendUserFileMessageRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFile() == nil {
		err := SendUserFileMessageRequestValidationError{
			field:  "File",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserFileMessageRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserFileMessageRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserFileMessageRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserFileMessageRequestMultiError(errors)
	}

	return nil
}

// SendUserFileMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendUserFileMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendUserFileMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserFileMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserFileMessageRequestMultiError) AllErrors() []error { return m }

// SendUserFileMessageRequestValidationError is the validation error returned
// by SendUserFileMessageRequest.Validate if the designated constraints aren't met.
type SendUserFileMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserFileMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserFileMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserFileMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserFileMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserFileMessageRequestValidationError) ErrorName() string {
	return "SendUserFileMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserFileMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserFileMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserFileMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserFileMessageRequestValidationError{}

// Validate checks the field values on SendUserFileMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserFileMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserFileMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserFileMessageResponseMultiError, or nil if none found.
func (m *SendUserFileMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserFileMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendUserFileMessageResponseMultiError(errors)
	}

	return nil
}

// SendUserFileMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendUserFileMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendUserFileMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserFileMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserFileMessageResponseMultiError) AllErrors() []error { return m }

// SendUserFileMessageResponseValidationError is the validation error returned
// by SendUserFileMessageResponse.Validate if the designated constraints
// aren't met.
type SendUserFileMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserFileMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserFileMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserFileMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserFileMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserFileMessageResponseValidationError) ErrorName() string {
	return "SendUserFileMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserFileMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserFileMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserFileMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserFileMessageResponseValidationError{}

// Validate checks the field values on SendGroupTextMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupTextMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupTextMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupTextMessageRequestMultiError, or nil if none found.
func (m *SendGroupTextMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupTextMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupTextMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupTextMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetText() == nil {
		err := SendGroupTextMessageRequestValidationError{
			field:  "Text",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupTextMessageRequestValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupTextMessageRequestValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupTextMessageRequestValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupTextMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupTextMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupTextMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupTextMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupTextMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupTextMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupTextMessageRequestValidationError is the validation error returned
// by SendGroupTextMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupTextMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupTextMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupTextMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupTextMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupTextMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupTextMessageRequestValidationError) ErrorName() string {
	return "SendGroupTextMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupTextMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupTextMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupTextMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupTextMessageRequestValidationError{}

// Validate checks the field values on SendGroupTextMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupTextMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupTextMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupTextMessageResponseMultiError, or nil if none found.
func (m *SendGroupTextMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupTextMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupTextMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupTextMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupTextMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendGroupTextMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupTextMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupTextMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupTextMessageResponseValidationError is the validation error returned
// by SendGroupTextMessageResponse.Validate if the designated constraints
// aren't met.
type SendGroupTextMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupTextMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupTextMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupTextMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupTextMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupTextMessageResponseValidationError) ErrorName() string {
	return "SendGroupTextMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupTextMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupTextMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupTextMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupTextMessageResponseValidationError{}

// Validate checks the field values on SendGroupLocationMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupLocationMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupLocationMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGroupLocationMessageRequestMultiError, or nil if none found.
func (m *SendGroupLocationMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupLocationMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupLocationMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupLocationMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetLocation() == nil {
		err := SendGroupLocationMessageRequestValidationError{
			field:  "Location",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupLocationMessageRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupLocationMessageRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupLocationMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupLocationMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupLocationMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupLocationMessageRequest.ValidateAll()
// if the designated constraints aren't met.
type SendGroupLocationMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupLocationMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupLocationMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupLocationMessageRequestValidationError is the validation error
// returned by SendGroupLocationMessageRequest.Validate if the designated
// constraints aren't met.
type SendGroupLocationMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupLocationMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupLocationMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupLocationMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupLocationMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupLocationMessageRequestValidationError) ErrorName() string {
	return "SendGroupLocationMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupLocationMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupLocationMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupLocationMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupLocationMessageRequestValidationError{}

// Validate checks the field values on SendGroupLocationMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendGroupLocationMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupLocationMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGroupLocationMessageResponseMultiError, or nil if none found.
func (m *SendGroupLocationMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupLocationMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupLocationMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupLocationMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendGroupLocationMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SendGroupLocationMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupLocationMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupLocationMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupLocationMessageResponseValidationError is the validation error
// returned by SendGroupLocationMessageResponse.Validate if the designated
// constraints aren't met.
type SendGroupLocationMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupLocationMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupLocationMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupLocationMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupLocationMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupLocationMessageResponseValidationError) ErrorName() string {
	return "SendGroupLocationMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupLocationMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupLocationMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupLocationMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupLocationMessageResponseValidationError{}

// Validate checks the field values on SendGroupFaceMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupFaceMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupFaceMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupFaceMessageRequestMultiError, or nil if none found.
func (m *SendGroupFaceMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupFaceMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupFaceMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupFaceMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFace() == nil {
		err := SendGroupFaceMessageRequestValidationError{
			field:  "Face",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupFaceMessageRequestValidationError{
					field:  "Face",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupFaceMessageRequestValidationError{
					field:  "Face",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupFaceMessageRequestValidationError{
				field:  "Face",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupFaceMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupFaceMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupFaceMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupFaceMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupFaceMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupFaceMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupFaceMessageRequestValidationError is the validation error returned
// by SendGroupFaceMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupFaceMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupFaceMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupFaceMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupFaceMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupFaceMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupFaceMessageRequestValidationError) ErrorName() string {
	return "SendGroupFaceMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupFaceMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupFaceMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupFaceMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupFaceMessageRequestValidationError{}

// Validate checks the field values on SendGroupFaceMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupFaceMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupFaceMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupFaceMessageResponseMultiError, or nil if none found.
func (m *SendGroupFaceMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupFaceMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupFaceMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupFaceMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupFaceMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendGroupFaceMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupFaceMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupFaceMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupFaceMessageResponseValidationError is the validation error returned
// by SendGroupFaceMessageResponse.Validate if the designated constraints
// aren't met.
type SendGroupFaceMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupFaceMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupFaceMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupFaceMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupFaceMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupFaceMessageResponseValidationError) ErrorName() string {
	return "SendGroupFaceMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupFaceMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupFaceMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupFaceMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupFaceMessageResponseValidationError{}

// Validate checks the field values on SendGroupSoundMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupSoundMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupSoundMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupSoundMessageRequestMultiError, or nil if none found.
func (m *SendGroupSoundMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupSoundMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupSoundMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupSoundMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSound() == nil {
		err := SendGroupSoundMessageRequestValidationError{
			field:  "Sound",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSound()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupSoundMessageRequestValidationError{
					field:  "Sound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupSoundMessageRequestValidationError{
					field:  "Sound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSound()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupSoundMessageRequestValidationError{
				field:  "Sound",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupSoundMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupSoundMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupSoundMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupSoundMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupSoundMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupSoundMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupSoundMessageRequestValidationError is the validation error returned
// by SendGroupSoundMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupSoundMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupSoundMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupSoundMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupSoundMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupSoundMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupSoundMessageRequestValidationError) ErrorName() string {
	return "SendGroupSoundMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupSoundMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupSoundMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupSoundMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupSoundMessageRequestValidationError{}

// Validate checks the field values on SendGroupSoundMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupSoundMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupSoundMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGroupSoundMessageResponseMultiError, or nil if none found.
func (m *SendGroupSoundMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupSoundMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupSoundMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupSoundMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupSoundMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendGroupSoundMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupSoundMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupSoundMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupSoundMessageResponseValidationError is the validation error
// returned by SendGroupSoundMessageResponse.Validate if the designated
// constraints aren't met.
type SendGroupSoundMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupSoundMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupSoundMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupSoundMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupSoundMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupSoundMessageResponseValidationError) ErrorName() string {
	return "SendGroupSoundMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupSoundMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupSoundMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupSoundMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupSoundMessageResponseValidationError{}

// Validate checks the field values on SendGroupVideoMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupVideoMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupVideoMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupVideoMessageRequestMultiError, or nil if none found.
func (m *SendGroupVideoMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupVideoMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupVideoMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupVideoMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetVideo() == nil {
		err := SendGroupVideoMessageRequestValidationError{
			field:  "Video",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupVideoMessageRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupVideoMessageRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupVideoMessageRequestValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupVideoMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupVideoMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupVideoMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupVideoMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupVideoMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupVideoMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupVideoMessageRequestValidationError is the validation error returned
// by SendGroupVideoMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupVideoMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupVideoMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupVideoMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupVideoMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupVideoMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupVideoMessageRequestValidationError) ErrorName() string {
	return "SendGroupVideoMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupVideoMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupVideoMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupVideoMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupVideoMessageRequestValidationError{}

// Validate checks the field values on SendGroupVideoMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupVideoMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupVideoMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGroupVideoMessageResponseMultiError, or nil if none found.
func (m *SendGroupVideoMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupVideoMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupVideoMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupVideoMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupVideoMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendGroupVideoMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupVideoMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupVideoMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupVideoMessageResponseValidationError is the validation error
// returned by SendGroupVideoMessageResponse.Validate if the designated
// constraints aren't met.
type SendGroupVideoMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupVideoMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupVideoMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupVideoMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupVideoMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupVideoMessageResponseValidationError) ErrorName() string {
	return "SendGroupVideoMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupVideoMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupVideoMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupVideoMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupVideoMessageResponseValidationError{}

// Validate checks the field values on SendGroupImageMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupImageMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupImageMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupImageMessageRequestMultiError, or nil if none found.
func (m *SendGroupImageMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupImageMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupImageMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupImageMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetImage() == nil {
		err := SendGroupImageMessageRequestValidationError{
			field:  "Image",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupImageMessageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupImageMessageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupImageMessageRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupImageMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupImageMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupImageMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupImageMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupImageMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupImageMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupImageMessageRequestValidationError is the validation error returned
// by SendGroupImageMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupImageMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupImageMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupImageMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupImageMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupImageMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupImageMessageRequestValidationError) ErrorName() string {
	return "SendGroupImageMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupImageMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupImageMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupImageMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupImageMessageRequestValidationError{}

// Validate checks the field values on SendGroupImageMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupImageMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupImageMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGroupImageMessageResponseMultiError, or nil if none found.
func (m *SendGroupImageMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupImageMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupImageMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupImageMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupImageMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendGroupImageMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupImageMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupImageMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupImageMessageResponseValidationError is the validation error
// returned by SendGroupImageMessageResponse.Validate if the designated
// constraints aren't met.
type SendGroupImageMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupImageMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupImageMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupImageMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupImageMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupImageMessageResponseValidationError) ErrorName() string {
	return "SendGroupImageMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupImageMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupImageMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupImageMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupImageMessageResponseValidationError{}

// Validate checks the field values on SendGroupFileMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupFileMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupFileMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupFileMessageRequestMultiError, or nil if none found.
func (m *SendGroupFileMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupFileMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetToGroupId() <= 0 {
		err := SendGroupFileMessageRequestValidationError{
			field:  "ToGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAtUserId() {
		_, _ = idx, item

		if item <= 0 {
			err := SendGroupFileMessageRequestValidationError{
				field:  fmt.Sprintf("AtUserId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFile() == nil {
		err := SendGroupFileMessageRequestValidationError{
			field:  "File",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendGroupFileMessageRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendGroupFileMessageRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendGroupFileMessageRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendGroupFileMessageRequestMultiError(errors)
	}

	return nil
}

// SendGroupFileMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendGroupFileMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGroupFileMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupFileMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupFileMessageRequestMultiError) AllErrors() []error { return m }

// SendGroupFileMessageRequestValidationError is the validation error returned
// by SendGroupFileMessageRequest.Validate if the designated constraints
// aren't met.
type SendGroupFileMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupFileMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupFileMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupFileMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupFileMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupFileMessageRequestValidationError) ErrorName() string {
	return "SendGroupFileMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupFileMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupFileMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupFileMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupFileMessageRequestValidationError{}

// Validate checks the field values on SendGroupFileMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGroupFileMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGroupFileMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGroupFileMessageResponseMultiError, or nil if none found.
func (m *SendGroupFileMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGroupFileMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendGroupFileMessageResponseMultiError(errors)
	}

	return nil
}

// SendGroupFileMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendGroupFileMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type SendGroupFileMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGroupFileMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGroupFileMessageResponseMultiError) AllErrors() []error { return m }

// SendGroupFileMessageResponseValidationError is the validation error returned
// by SendGroupFileMessageResponse.Validate if the designated constraints
// aren't met.
type SendGroupFileMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGroupFileMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGroupFileMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGroupFileMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGroupFileMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGroupFileMessageResponseValidationError) ErrorName() string {
	return "SendGroupFileMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGroupFileMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGroupFileMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGroupFileMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGroupFileMessageResponseValidationError{}

// Validate checks the field values on ParseMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseMessageRequestMultiError, or nil if none found.
func (m *ParseMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetContent()) < 1 {
		err := ParseMessageRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParseMessageRequestMultiError(errors)
	}

	return nil
}

// ParseMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ParseMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ParseMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseMessageRequestMultiError) AllErrors() []error { return m }

// ParseMessageRequestValidationError is the validation error returned by
// ParseMessageRequest.Validate if the designated constraints aren't met.
type ParseMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseMessageRequestValidationError) ErrorName() string {
	return "ParseMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ParseMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseMessageRequestValidationError{}

// Validate checks the field values on ParseMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseMessageResponseMultiError, or nil if none found.
func (m *ParseMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ParseMessageResponseMultiError(errors)
	}

	return nil
}

// ParseMessageResponseMultiError is an error wrapping multiple validation
// errors returned by ParseMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type ParseMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseMessageResponseMultiError) AllErrors() []error { return m }

// ParseMessageResponseValidationError is the validation error returned by
// ParseMessageResponse.Validate if the designated constraints aren't met.
type ParseMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseMessageResponseValidationError) ErrorName() string {
	return "ParseMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ParseMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseMessageResponseValidationError{}
