// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feed.proto

package proto_build

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Feed with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Feed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Feed with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FeedMultiError, or nil if none found.
func (m *Feed) ValidateAll() error {
	return m.validate(true)
}

func (m *Feed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for LikeCount

	// no validation rules for ViewCount

	// no validation rules for CommentCount

	// no validation rules for Operator

	// no validation rules for Remark

	// no validation rules for Hot

	// no validation rules for IsEnable

	// no validation rules for ReviewStatus

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedMultiError(errors)
	}

	return nil
}

// FeedMultiError is an error wrapping multiple validation errors returned by
// Feed.ValidateAll() if the designated constraints aren't met.
type FeedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedMultiError) AllErrors() []error { return m }

// FeedValidationError is the validation error returned by Feed.Validate if the
// designated constraints aren't met.
type FeedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedValidationError) ErrorName() string { return "FeedValidationError" }

// Error satisfies the builtin error interface
func (e FeedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedValidationError{}

// Validate checks the field values on FeedImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedImageMultiError, or nil
// if none found.
func (m *FeedImage) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FeedId

	// no validation rules for ImgUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedImageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedImageValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedImageValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedImageValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedImageMultiError(errors)
	}

	return nil
}

// FeedImageMultiError is an error wrapping multiple validation errors returned
// by FeedImage.ValidateAll() if the designated constraints aren't met.
type FeedImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedImageMultiError) AllErrors() []error { return m }

// FeedImageValidationError is the validation error returned by
// FeedImage.Validate if the designated constraints aren't met.
type FeedImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedImageValidationError) ErrorName() string { return "FeedImageValidationError" }

// Error satisfies the builtin error interface
func (e FeedImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedImageValidationError{}

// Validate checks the field values on FeedVideo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedVideo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedVideo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedVideoMultiError, or nil
// if none found.
func (m *FeedVideo) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedVideo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FeedId

	// no validation rules for VideoUrl

	// no validation rules for CoverUrl

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Duration

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedVideoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedVideoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedVideoValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedVideoValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedVideoMultiError(errors)
	}

	return nil
}

// FeedVideoMultiError is an error wrapping multiple validation errors returned
// by FeedVideo.ValidateAll() if the designated constraints aren't met.
type FeedVideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedVideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedVideoMultiError) AllErrors() []error { return m }

// FeedVideoValidationError is the validation error returned by
// FeedVideo.Validate if the designated constraints aren't met.
type FeedVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedVideoValidationError) ErrorName() string { return "FeedVideoValidationError" }

// Error satisfies the builtin error interface
func (e FeedVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedVideoValidationError{}

// Validate checks the field values on FeedLike with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedLike) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedLike with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedLikeMultiError, or nil
// if none found.
func (m *FeedLike) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedLike) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FeedId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedLikeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedLikeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedLikeValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedLikeValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedLikeMultiError(errors)
	}

	return nil
}

// FeedLikeMultiError is an error wrapping multiple validation errors returned
// by FeedLike.ValidateAll() if the designated constraints aren't met.
type FeedLikeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedLikeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedLikeMultiError) AllErrors() []error { return m }

// FeedLikeValidationError is the validation error returned by
// FeedLike.Validate if the designated constraints aren't met.
type FeedLikeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedLikeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedLikeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedLikeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedLikeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedLikeValidationError) ErrorName() string { return "FeedLikeValidationError" }

// Error satisfies the builtin error interface
func (e FeedLikeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedLike.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedLikeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedLikeValidationError{}

// Validate checks the field values on FeedCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedCreateRequestMultiError, or nil if none found.
func (m *FeedCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := FeedType_name[int32(m.GetType())]; !ok {
		err := FeedCreateRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetContent() != "" {

		if !_FeedCreateRequest_Content_Pattern.MatchString(m.GetContent()) {
			err := FeedCreateRequestValidationError{
				field:  "Content",
				reason: "value does not match regex pattern \"^\\\\s{2,500}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetResource() {
		_, _ = idx, item

		if uri, err := url.Parse(item); err != nil {
			err = FeedCreateRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := FeedCreateRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_FeedCreateRequest_Resource_Pattern.MatchString(item) {
			err := FeedCreateRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value does not match regex pattern \"(jpg|jpeg|png|avi|mov|rmvb|rm|flv|mp4|3gp)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return FeedCreateRequestMultiError(errors)
	}

	return nil
}

// FeedCreateRequestMultiError is an error wrapping multiple validation errors
// returned by FeedCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedCreateRequestMultiError) AllErrors() []error { return m }

// FeedCreateRequestValidationError is the validation error returned by
// FeedCreateRequest.Validate if the designated constraints aren't met.
type FeedCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedCreateRequestValidationError) ErrorName() string {
	return "FeedCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedCreateRequestValidationError{}

var _FeedCreateRequest_Content_Pattern = regexp.MustCompile("^\\s{2,500}$")

var _FeedCreateRequest_Resource_Pattern = regexp.MustCompile("(jpg|jpeg|png|avi|mov|rmvb|rm|flv|mp4|3gp)$")

// Validate checks the field values on FeedCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedCreateResponseMultiError, or nil if none found.
func (m *FeedCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedCreateResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedCreateResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedCreateResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedCreateResponseMultiError(errors)
	}

	return nil
}

// FeedCreateResponseMultiError is an error wrapping multiple validation errors
// returned by FeedCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedCreateResponseMultiError) AllErrors() []error { return m }

// FeedCreateResponseValidationError is the validation error returned by
// FeedCreateResponse.Validate if the designated constraints aren't met.
type FeedCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedCreateResponseValidationError) ErrorName() string {
	return "FeedCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedCreateResponseValidationError{}

// Validate checks the field values on FeedEditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedEditRequestMultiError, or nil if none found.
func (m *FeedEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedEditRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := FeedType_name[int32(m.GetType())]; !ok {
		err := FeedEditRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetContent() != "" {

		if !_FeedEditRequest_Content_Pattern.MatchString(m.GetContent()) {
			err := FeedEditRequestValidationError{
				field:  "Content",
				reason: "value does not match regex pattern \"^\\\\s{2,500}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetResource() {
		_, _ = idx, item

		if uri, err := url.Parse(item); err != nil {
			err = FeedEditRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := FeedEditRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_FeedEditRequest_Resource_Pattern.MatchString(item) {
			err := FeedEditRequestValidationError{
				field:  fmt.Sprintf("Resource[%v]", idx),
				reason: "value does not match regex pattern \"(jpg|jpeg|png|avi|mov|rmvb|rm|flv|mp4|3gp)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return FeedEditRequestMultiError(errors)
	}

	return nil
}

// FeedEditRequestMultiError is an error wrapping multiple validation errors
// returned by FeedEditRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedEditRequestMultiError) AllErrors() []error { return m }

// FeedEditRequestValidationError is the validation error returned by
// FeedEditRequest.Validate if the designated constraints aren't met.
type FeedEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedEditRequestValidationError) ErrorName() string { return "FeedEditRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedEditRequestValidationError{}

var _FeedEditRequest_Content_Pattern = regexp.MustCompile("^\\s{2,500}$")

var _FeedEditRequest_Resource_Pattern = regexp.MustCompile("(jpg|jpeg|png|avi|mov|rmvb|rm|flv|mp4|3gp)$")

// Validate checks the field values on FeedEditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedEditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedEditResponseMultiError, or nil if none found.
func (m *FeedEditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedEditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedEditResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedEditResponseMultiError(errors)
	}

	return nil
}

// FeedEditResponseMultiError is an error wrapping multiple validation errors
// returned by FeedEditResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedEditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedEditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedEditResponseMultiError) AllErrors() []error { return m }

// FeedEditResponseValidationError is the validation error returned by
// FeedEditResponse.Validate if the designated constraints aren't met.
type FeedEditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedEditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedEditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedEditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedEditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedEditResponseValidationError) ErrorName() string { return "FeedEditResponseValidationError" }

// Error satisfies the builtin error interface
func (e FeedEditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedEditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedEditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedEditResponseValidationError{}

// Validate checks the field values on FeedLikeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedLikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedLikeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedLikeRequestMultiError, or nil if none found.
func (m *FeedLikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedLikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedLikeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedLikeRequestMultiError(errors)
	}

	return nil
}

// FeedLikeRequestMultiError is an error wrapping multiple validation errors
// returned by FeedLikeRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedLikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedLikeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedLikeRequestMultiError) AllErrors() []error { return m }

// FeedLikeRequestValidationError is the validation error returned by
// FeedLikeRequest.Validate if the designated constraints aren't met.
type FeedLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedLikeRequestValidationError) ErrorName() string { return "FeedLikeRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedLikeRequestValidationError{}

// Validate checks the field values on FeedLikeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedLikeResponseMultiError, or nil if none found.
func (m *FeedLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeedLikeResponseMultiError(errors)
	}

	return nil
}

// FeedLikeResponseMultiError is an error wrapping multiple validation errors
// returned by FeedLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedLikeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedLikeResponseMultiError) AllErrors() []error { return m }

// FeedLikeResponseValidationError is the validation error returned by
// FeedLikeResponse.Validate if the designated constraints aren't met.
type FeedLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedLikeResponseValidationError) ErrorName() string { return "FeedLikeResponseValidationError" }

// Error satisfies the builtin error interface
func (e FeedLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedLikeResponseValidationError{}

// Validate checks the field values on FeedUnLikeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedUnLikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedUnLikeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedUnLikeRequestMultiError, or nil if none found.
func (m *FeedUnLikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedUnLikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedUnLikeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedUnLikeRequestMultiError(errors)
	}

	return nil
}

// FeedUnLikeRequestMultiError is an error wrapping multiple validation errors
// returned by FeedUnLikeRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedUnLikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedUnLikeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedUnLikeRequestMultiError) AllErrors() []error { return m }

// FeedUnLikeRequestValidationError is the validation error returned by
// FeedUnLikeRequest.Validate if the designated constraints aren't met.
type FeedUnLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedUnLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedUnLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedUnLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedUnLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedUnLikeRequestValidationError) ErrorName() string {
	return "FeedUnLikeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedUnLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedUnLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedUnLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedUnLikeRequestValidationError{}

// Validate checks the field values on FeedUnLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedUnLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedUnLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedUnLikeResponseMultiError, or nil if none found.
func (m *FeedUnLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedUnLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeedUnLikeResponseMultiError(errors)
	}

	return nil
}

// FeedUnLikeResponseMultiError is an error wrapping multiple validation errors
// returned by FeedUnLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedUnLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedUnLikeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedUnLikeResponseMultiError) AllErrors() []error { return m }

// FeedUnLikeResponseValidationError is the validation error returned by
// FeedUnLikeResponse.Validate if the designated constraints aren't met.
type FeedUnLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedUnLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedUnLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedUnLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedUnLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedUnLikeResponseValidationError) ErrorName() string {
	return "FeedUnLikeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedUnLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedUnLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedUnLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedUnLikeResponseValidationError{}

// Validate checks the field values on FeedGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedGetRequestMultiError,
// or nil if none found.
func (m *FeedGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedGetRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedGetRequestMultiError(errors)
	}

	return nil
}

// FeedGetRequestMultiError is an error wrapping multiple validation errors
// returned by FeedGetRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedGetRequestMultiError) AllErrors() []error { return m }

// FeedGetRequestValidationError is the validation error returned by
// FeedGetRequest.Validate if the designated constraints aren't met.
type FeedGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedGetRequestValidationError) ErrorName() string { return "FeedGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedGetRequestValidationError{}

// Validate checks the field values on FeedGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedGetResponseMultiError, or nil if none found.
func (m *FeedGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedGetResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedGetResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedGetResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedGetResponseMultiError(errors)
	}

	return nil
}

// FeedGetResponseMultiError is an error wrapping multiple validation errors
// returned by FeedGetResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedGetResponseMultiError) AllErrors() []error { return m }

// FeedGetResponseValidationError is the validation error returned by
// FeedGetResponse.Validate if the designated constraints aren't met.
type FeedGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedGetResponseValidationError) ErrorName() string { return "FeedGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e FeedGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedGetResponseValidationError{}

// Validate checks the field values on FeedDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedDeleteRequestMultiError, or nil if none found.
func (m *FeedDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FeedDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedDeleteRequestMultiError(errors)
	}

	return nil
}

// FeedDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by FeedDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedDeleteRequestMultiError) AllErrors() []error { return m }

// FeedDeleteRequestValidationError is the validation error returned by
// FeedDeleteRequest.Validate if the designated constraints aren't met.
type FeedDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedDeleteRequestValidationError) ErrorName() string {
	return "FeedDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedDeleteRequestValidationError{}

// Validate checks the field values on FeedDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedDeleteResponseMultiError, or nil if none found.
func (m *FeedDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeedDeleteResponseMultiError(errors)
	}

	return nil
}

// FeedDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by FeedDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedDeleteResponseMultiError) AllErrors() []error { return m }

// FeedDeleteResponseValidationError is the validation error returned by
// FeedDeleteResponse.Validate if the designated constraints aren't met.
type FeedDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedDeleteResponseValidationError) ErrorName() string {
	return "FeedDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedDeleteResponseValidationError{}

// Validate checks the field values on FeedOwnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedOwnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedOwnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedOwnRequestMultiError,
// or nil if none found.
func (m *FeedOwnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedOwnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKeyword() != "" {

		if !_FeedOwnRequest_Keyword_Pattern.MatchString(m.GetKeyword()) {
			err := FeedOwnRequestValidationError{
				field:  "Keyword",
				reason: "value does not match regex pattern \"^\\\\s{1,10}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ReviewStatus

	if m.GetLastId() < 0 {
		err := FeedOwnRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNum() <= 0 {
		err := FeedOwnRequestValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedOwnRequestMultiError(errors)
	}

	return nil
}

// FeedOwnRequestMultiError is an error wrapping multiple validation errors
// returned by FeedOwnRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedOwnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedOwnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedOwnRequestMultiError) AllErrors() []error { return m }

// FeedOwnRequestValidationError is the validation error returned by
// FeedOwnRequest.Validate if the designated constraints aren't met.
type FeedOwnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedOwnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedOwnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedOwnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedOwnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedOwnRequestValidationError) ErrorName() string { return "FeedOwnRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedOwnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedOwnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedOwnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedOwnRequestValidationError{}

var _FeedOwnRequest_Keyword_Pattern = regexp.MustCompile("^\\s{1,10}$")

// Validate checks the field values on FeedOwnResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedOwnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedOwnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedOwnResponseMultiError, or nil if none found.
func (m *FeedOwnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedOwnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPager()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedOwnResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedOwnResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPager()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedOwnResponseValidationError{
				field:  "Pager",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFeed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedOwnResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedOwnResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedOwnResponseValidationError{
					field:  fmt.Sprintf("Feed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedOwnResponseMultiError(errors)
	}

	return nil
}

// FeedOwnResponseMultiError is an error wrapping multiple validation errors
// returned by FeedOwnResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedOwnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedOwnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedOwnResponseMultiError) AllErrors() []error { return m }

// FeedOwnResponseValidationError is the validation error returned by
// FeedOwnResponse.Validate if the designated constraints aren't met.
type FeedOwnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedOwnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedOwnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedOwnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedOwnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedOwnResponseValidationError) ErrorName() string { return "FeedOwnResponseValidationError" }

// Error satisfies the builtin error interface
func (e FeedOwnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedOwnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedOwnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedOwnResponseValidationError{}

// Validate checks the field values on FeedQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedQueryRequestMultiError, or nil if none found.
func (m *FeedQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKeyword() != "" {

		if !_FeedQueryRequest_Keyword_Pattern.MatchString(m.GetKeyword()) {
			err := FeedQueryRequestValidationError{
				field:  "Keyword",
				reason: "value does not match regex pattern \"^\\\\s{1,10}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetLastId() < 0 {
		err := FeedQueryRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNum() <= 0 {
		err := FeedQueryRequestValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedQueryRequestMultiError(errors)
	}

	return nil
}

// FeedQueryRequestMultiError is an error wrapping multiple validation errors
// returned by FeedQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedQueryRequestMultiError) AllErrors() []error { return m }

// FeedQueryRequestValidationError is the validation error returned by
// FeedQueryRequest.Validate if the designated constraints aren't met.
type FeedQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedQueryRequestValidationError) ErrorName() string { return "FeedQueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedQueryRequestValidationError{}

var _FeedQueryRequest_Keyword_Pattern = regexp.MustCompile("^\\s{1,10}$")

// Validate checks the field values on FeedQueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedQueryResponseMultiError, or nil if none found.
func (m *FeedQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPager()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedQueryResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedQueryResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPager()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedQueryResponseValidationError{
				field:  "Pager",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFeed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedQueryResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedQueryResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedQueryResponseValidationError{
					field:  fmt.Sprintf("Feed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedQueryResponseMultiError(errors)
	}

	return nil
}

// FeedQueryResponseMultiError is an error wrapping multiple validation errors
// returned by FeedQueryResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedQueryResponseMultiError) AllErrors() []error { return m }

// FeedQueryResponseValidationError is the validation error returned by
// FeedQueryResponse.Validate if the designated constraints aren't met.
type FeedQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedQueryResponseValidationError) ErrorName() string {
	return "FeedQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedQueryResponseValidationError{}

// Validate checks the field values on FeedRecommendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedRecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedRecommendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedRecommendRequestMultiError, or nil if none found.
func (m *FeedRecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedRecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNum() <= 0 {
		err := FeedRecommendRequestValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedRecommendRequestMultiError(errors)
	}

	return nil
}

// FeedRecommendRequestMultiError is an error wrapping multiple validation
// errors returned by FeedRecommendRequest.ValidateAll() if the designated
// constraints aren't met.
type FeedRecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedRecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedRecommendRequestMultiError) AllErrors() []error { return m }

// FeedRecommendRequestValidationError is the validation error returned by
// FeedRecommendRequest.Validate if the designated constraints aren't met.
type FeedRecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedRecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedRecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedRecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedRecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedRecommendRequestValidationError) ErrorName() string {
	return "FeedRecommendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedRecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedRecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedRecommendRequestValidationError{}

// Validate checks the field values on FeedRecommendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedRecommendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedRecommendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedRecommendResponseMultiError, or nil if none found.
func (m *FeedRecommendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedRecommendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPager()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedRecommendResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedRecommendResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPager()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedRecommendResponseValidationError{
				field:  "Pager",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFeed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedRecommendResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedRecommendResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedRecommendResponseValidationError{
					field:  fmt.Sprintf("Feed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedRecommendResponseMultiError(errors)
	}

	return nil
}

// FeedRecommendResponseMultiError is an error wrapping multiple validation
// errors returned by FeedRecommendResponse.ValidateAll() if the designated
// constraints aren't met.
type FeedRecommendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedRecommendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedRecommendResponseMultiError) AllErrors() []error { return m }

// FeedRecommendResponseValidationError is the validation error returned by
// FeedRecommendResponse.Validate if the designated constraints aren't met.
type FeedRecommendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedRecommendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedRecommendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedRecommendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedRecommendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedRecommendResponseValidationError) ErrorName() string {
	return "FeedRecommendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedRecommendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedRecommendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedRecommendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedRecommendResponseValidationError{}

// Validate checks the field values on FeedFollowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedFollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedFollowRequestMultiError, or nil if none found.
func (m *FeedFollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedFollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNum() <= 0 {
		err := FeedFollowRequestValidationError{
			field:  "Num",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedFollowRequestMultiError(errors)
	}

	return nil
}

// FeedFollowRequestMultiError is an error wrapping multiple validation errors
// returned by FeedFollowRequest.ValidateAll() if the designated constraints
// aren't met.
type FeedFollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedFollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedFollowRequestMultiError) AllErrors() []error { return m }

// FeedFollowRequestValidationError is the validation error returned by
// FeedFollowRequest.Validate if the designated constraints aren't met.
type FeedFollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedFollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedFollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedFollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedFollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedFollowRequestValidationError) ErrorName() string {
	return "FeedFollowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedFollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedFollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedFollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedFollowRequestValidationError{}

// Validate checks the field values on FeedFollowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedFollowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedFollowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedFollowResponseMultiError, or nil if none found.
func (m *FeedFollowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedFollowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPager()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedFollowResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedFollowResponseValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPager()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedFollowResponseValidationError{
				field:  "Pager",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFeed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedFollowResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedFollowResponseValidationError{
						field:  fmt.Sprintf("Feed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedFollowResponseValidationError{
					field:  fmt.Sprintf("Feed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedFollowResponseMultiError(errors)
	}

	return nil
}

// FeedFollowResponseMultiError is an error wrapping multiple validation errors
// returned by FeedFollowResponse.ValidateAll() if the designated constraints
// aren't met.
type FeedFollowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedFollowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedFollowResponseMultiError) AllErrors() []error { return m }

// FeedFollowResponseValidationError is the validation error returned by
// FeedFollowResponse.Validate if the designated constraints aren't met.
type FeedFollowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedFollowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedFollowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedFollowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedFollowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedFollowResponseValidationError) ErrorName() string {
	return "FeedFollowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedFollowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedFollowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedFollowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedFollowResponseValidationError{}
