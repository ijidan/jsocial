// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ijidan/jsocial/internal/pkg/config"
	"github.com/ijidan/jsocial/internal/pkg/db"
	"github.com/ijidan/jsocial/internal/pkg/global"
	"github.com/ijidan/jsocial/internal/pkg/jaeger"
	"github.com/ijidan/jsocial/internal/pkg/logger"
	"github.com/ijidan/jsocial/internal/pkg/redis"
	"github.com/ijidan/jsocial/internal/pkg/response"
)

// Injectors from wire.go:

func InitializeEventHttpGlobal(root logger.Root, configPath string) (*global.HttpGlobal, error) {
	configConfig := config.GetConfigInstance(configPath)
	http := config.NewHttp(configConfig)
	logrusLogger := logger.NewLogger(http, root)
	mysql := config.NewMysql(configConfig)
	gormDB := db.NewDb(mysql)
	configRedis := config.NewRedis(configConfig)
	conn, err := redis.GetRdInstance(configRedis)
	if err != nil {
		return nil, err
	}
	responseResponse, err := response.GetResponseInstance()
	if err != nil {
		return nil, err
	}
	configJaeger := config.NewJaeger(configConfig)
	app := config.NewApp(configConfig)
	jaegerJaeger, err := jaeger.NewJaeger(configJaeger, app)
	if err != nil {
		return nil, err
	}
	httpGlobal := global.NewHttpGlobal(configConfig, logrusLogger, gormDB, conn, responseResponse, jaegerJaeger)
	return httpGlobal, nil
}
