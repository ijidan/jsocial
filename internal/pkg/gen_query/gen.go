// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"
	query2 "github.com/ijidan/jsocial/internal/app/message/query"
	"github.com/ijidan/jsocial/internal/app/user/gen_query"
	query3 "github.com/ijidan/jsocial/internal/app/user/query"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Device:                 newDevice(db),
		DeviceAck:              newDeviceAck(db),
		Feed:                   gen_query.newFeed(db),
		FeedImage:              gen_query.newFeedImage(db),
		FeedLike:               gen_query.newFeedLike(db),
		FeedVideo:              gen_query.newFeedVideo(db),
		Gid:                    newGid(db),
		GoadminMenu:            newGoadminMenu(db),
		GoadminOperationLog:    newGoadminOperationLog(db),
		GoadminPermissions:     newGoadminPermissions(db),
		GoadminRoleMenu:        newGoadminRoleMenu(db),
		GoadminRolePermissions: newGoadminRolePermissions(db),
		GoadminRoleUsers:       newGoadminRoleUsers(db),
		GoadminRoles:           newGoadminRoles(db),
		GoadminSession:         newGoadminSession(db),
		GoadminSite:            newGoadminSite(db),
		GoadminUserPermissions: newGoadminUserPermissions(db),
		GoadminUsers:           newGoadminUsers(db),
		Group:                  query3.newGroup(db),
		GroupUser:              query3.newGroupUser(db),
		MessageContent:         query2.newMessageContent(db),
		MessageIndex:           query2.newMessageIndex(db),
		SchemaMigrations:       newSchemaMigrations(db),
		User:                   gen_query.newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Device                 device
	DeviceAck deviceAck
	Feed      gen_query.feed
	FeedImage gen_query.feedImage
	FeedLike  gen_query.feedLike
	FeedVideo gen_query.feedVideo
	Gid       gid
	GoadminMenu            goadminMenu
	GoadminOperationLog    goadminOperationLog
	GoadminPermissions     goadminPermissions
	GoadminRoleMenu        goadminRoleMenu
	GoadminRolePermissions goadminRolePermissions
	GoadminRoleUsers       goadminRoleUsers
	GoadminRoles           goadminRoles
	GoadminSession         goadminSession
	GoadminSite            goadminSite
	GoadminUserPermissions goadminUserPermissions
	GoadminUsers   goadminUsers
	Group          query3.group
	GroupUser      query3.groupUser
	MessageContent query2.messageContent
	MessageIndex     query2.messageIndex
	SchemaMigrations schemaMigrations
	User             gen_query.user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Device:                 q.Device.clone(db),
		DeviceAck:              q.DeviceAck.clone(db),
		Feed:                   q.Feed.clone(db),
		FeedImage:              q.FeedImage.clone(db),
		FeedLike:               q.FeedLike.clone(db),
		FeedVideo:              q.FeedVideo.clone(db),
		Gid:                    q.Gid.clone(db),
		GoadminMenu:            q.GoadminMenu.clone(db),
		GoadminOperationLog:    q.GoadminOperationLog.clone(db),
		GoadminPermissions:     q.GoadminPermissions.clone(db),
		GoadminRoleMenu:        q.GoadminRoleMenu.clone(db),
		GoadminRolePermissions: q.GoadminRolePermissions.clone(db),
		GoadminRoleUsers:       q.GoadminRoleUsers.clone(db),
		GoadminRoles:           q.GoadminRoles.clone(db),
		GoadminSession:         q.GoadminSession.clone(db),
		GoadminSite:            q.GoadminSite.clone(db),
		GoadminUserPermissions: q.GoadminUserPermissions.clone(db),
		GoadminUsers:           q.GoadminUsers.clone(db),
		Group:                  q.Group.clone(db),
		GroupUser:              q.GroupUser.clone(db),
		MessageContent:         q.MessageContent.clone(db),
		MessageIndex:           q.MessageIndex.clone(db),
		SchemaMigrations:       q.SchemaMigrations.clone(db),
		User:                   q.User.clone(db),
	}
}

type queryCtx struct {
	Device                 deviceDo
	DeviceAck deviceAckDo
	Feed      gen_query.feedDo
	FeedImage gen_query.feedImageDo
	FeedLike  gen_query.feedLikeDo
	FeedVideo gen_query.feedVideoDo
	Gid       gidDo
	GoadminMenu            goadminMenuDo
	GoadminOperationLog    goadminOperationLogDo
	GoadminPermissions     goadminPermissionsDo
	GoadminRoleMenu        goadminRoleMenuDo
	GoadminRolePermissions goadminRolePermissionsDo
	GoadminRoleUsers       goadminRoleUsersDo
	GoadminRoles           goadminRolesDo
	GoadminSession         goadminSessionDo
	GoadminSite            goadminSiteDo
	GoadminUserPermissions goadminUserPermissionsDo
	GoadminUsers   goadminUsersDo
	Group          query3.groupDo
	GroupUser      query3.groupUserDo
	MessageContent query2.messageContentDo
	MessageIndex     query2.messageIndexDo
	SchemaMigrations schemaMigrationsDo
	User             gen_query.userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Device:                 *q.Device.WithContext(ctx),
		DeviceAck:              *q.DeviceAck.WithContext(ctx),
		Feed:                   *q.Feed.WithContext(ctx),
		FeedImage:              *q.FeedImage.WithContext(ctx),
		FeedLike:               *q.FeedLike.WithContext(ctx),
		FeedVideo:              *q.FeedVideo.WithContext(ctx),
		Gid:                    *q.Gid.WithContext(ctx),
		GoadminMenu:            *q.GoadminMenu.WithContext(ctx),
		GoadminOperationLog:    *q.GoadminOperationLog.WithContext(ctx),
		GoadminPermissions:     *q.GoadminPermissions.WithContext(ctx),
		GoadminRoleMenu:        *q.GoadminRoleMenu.WithContext(ctx),
		GoadminRolePermissions: *q.GoadminRolePermissions.WithContext(ctx),
		GoadminRoleUsers:       *q.GoadminRoleUsers.WithContext(ctx),
		GoadminRoles:           *q.GoadminRoles.WithContext(ctx),
		GoadminSession:         *q.GoadminSession.WithContext(ctx),
		GoadminSite:            *q.GoadminSite.WithContext(ctx),
		GoadminUserPermissions: *q.GoadminUserPermissions.WithContext(ctx),
		GoadminUsers:           *q.GoadminUsers.WithContext(ctx),
		Group:                  *q.Group.WithContext(ctx),
		GroupUser:              *q.GroupUser.WithContext(ctx),
		MessageContent:         *q.MessageContent.WithContext(ctx),
		MessageIndex:           *q.MessageIndex.WithContext(ctx),
		SchemaMigrations:       *q.SchemaMigrations.WithContext(ctx),
		User:                   *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
