// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newMessageIndex(db *gorm.DB) messageIndex {
	_messageIndex := messageIndex{}

	_messageIndex.messageIndexDo.UseDB(db)
	_messageIndex.messageIndexDo.UseModel(&model.MessageIndex{})

	tableName := _messageIndex.messageIndexDo.TableName()
	_messageIndex.ALL = field.NewAsterisk(tableName)
	_messageIndex.ID = field.NewInt64(tableName, "id")
	_messageIndex.SenderID = field.NewInt64(tableName, "sender_id")
	_messageIndex.ReceiverID = field.NewInt64(tableName, "receiver_id")
	_messageIndex.MessageContentID = field.NewInt64(tableName, "message_content_id")
	_messageIndex.GroupID = field.NewInt64(tableName, "group_id")
	_messageIndex.Status = field.NewInt32(tableName, "status")
	_messageIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_messageIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageIndex.DeletedAt = field.NewField(tableName, "deleted_at")

	_messageIndex.fillFieldMap()

	return _messageIndex
}

type messageIndex struct {
	messageIndexDo messageIndexDo

	ALL              field.Asterisk
	ID               field.Int64
	SenderID         field.Int64 // 发送人ID
	ReceiverID       field.Int64 // 接收人ID
	MessageContentID field.Int64 // 消息ID
	GroupID          field.Int64 // 群ID
	Status           field.Int32 // 状态：1-待送达，2-已送到，3-已确认，0-已删除
	CreatedAt        field.Time  // 创建时间
	UpdatedAt        field.Time  // 更新时间
	DeletedAt        field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (m messageIndex) Table(newTableName string) *messageIndex {
	m.messageIndexDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageIndex) As(alias string) *messageIndex {
	m.messageIndexDo.DO = *(m.messageIndexDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageIndex) updateTableName(table string) *messageIndex {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.SenderID = field.NewInt64(table, "sender_id")
	m.ReceiverID = field.NewInt64(table, "receiver_id")
	m.MessageContentID = field.NewInt64(table, "message_content_id")
	m.GroupID = field.NewInt64(table, "group_id")
	m.Status = field.NewInt32(table, "status")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *messageIndex) WithContext(ctx context.Context) IMessageIndexDo {
	return m.messageIndexDo.WithContext(ctx)
}

func (m messageIndex) TableName() string { return m.messageIndexDo.TableName() }

func (m messageIndex) Alias() string { return m.messageIndexDo.Alias() }

func (m *messageIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageIndex) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["sender_id"] = m.SenderID
	m.fieldMap["receiver_id"] = m.ReceiverID
	m.fieldMap["message_content_id"] = m.MessageContentID
	m.fieldMap["group_id"] = m.GroupID
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m messageIndex) clone(db *gorm.DB) messageIndex {
	m.messageIndexDo.ReplaceDB(db)
	return m
}

type messageIndexDo struct{ gen.DO }

type IMessageIndexDo interface {
	gen.SubQuery
	Debug() IMessageIndexDo
	WithContext(ctx context.Context) IMessageIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageIndexDo
	WriteDB() IMessageIndexDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageIndexDo
	Not(conds ...gen.Condition) IMessageIndexDo
	Or(conds ...gen.Condition) IMessageIndexDo
	Select(conds ...field.Expr) IMessageIndexDo
	Where(conds ...gen.Condition) IMessageIndexDo
	Order(conds ...field.Expr) IMessageIndexDo
	Distinct(cols ...field.Expr) IMessageIndexDo
	Omit(cols ...field.Expr) IMessageIndexDo
	Join(table schema.Tabler, on ...field.Expr) IMessageIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageIndexDo
	Group(cols ...field.Expr) IMessageIndexDo
	Having(conds ...gen.Condition) IMessageIndexDo
	Limit(limit int) IMessageIndexDo
	Offset(offset int) IMessageIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageIndexDo
	Unscoped() IMessageIndexDo
	Create(values ...*model.MessageIndex) error
	CreateInBatches(values []*model.MessageIndex, batchSize int) error
	Save(values ...*model.MessageIndex) error
	First() (*model.MessageIndex, error)
	Take() (*model.MessageIndex, error)
	Last() (*model.MessageIndex, error)
	Find() ([]*model.MessageIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageIndex, err error)
	FindInBatches(result *[]*model.MessageIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageIndexDo
	Assign(attrs ...field.AssignExpr) IMessageIndexDo
	Joins(fields ...field.RelationField) IMessageIndexDo
	Preload(fields ...field.RelationField) IMessageIndexDo
	FirstOrInit() (*model.MessageIndex, error)
	FirstOrCreate() (*model.MessageIndex, error)
	FindByPage(offset int, limit int) (result []*model.MessageIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetById(id int) (result *model.MessageIndex, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (m messageIndexDo) GetById(id int) (result *model.MessageIndex, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM message_index WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

func (m messageIndexDo) Debug() IMessageIndexDo {
	return m.withDO(m.DO.Debug())
}

func (m messageIndexDo) WithContext(ctx context.Context) IMessageIndexDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageIndexDo) ReadDB() IMessageIndexDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageIndexDo) WriteDB() IMessageIndexDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageIndexDo) Clauses(conds ...clause.Expression) IMessageIndexDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageIndexDo) Returning(value interface{}, columns ...string) IMessageIndexDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageIndexDo) Not(conds ...gen.Condition) IMessageIndexDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageIndexDo) Or(conds ...gen.Condition) IMessageIndexDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageIndexDo) Select(conds ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageIndexDo) Where(conds ...gen.Condition) IMessageIndexDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageIndexDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMessageIndexDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageIndexDo) Order(conds ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageIndexDo) Distinct(cols ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageIndexDo) Omit(cols ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageIndexDo) Join(table schema.Tabler, on ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageIndexDo) Group(cols ...field.Expr) IMessageIndexDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageIndexDo) Having(conds ...gen.Condition) IMessageIndexDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageIndexDo) Limit(limit int) IMessageIndexDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageIndexDo) Offset(offset int) IMessageIndexDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageIndexDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageIndexDo) Unscoped() IMessageIndexDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageIndexDo) Create(values ...*model.MessageIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageIndexDo) CreateInBatches(values []*model.MessageIndex, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageIndexDo) Save(values ...*model.MessageIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageIndexDo) First() (*model.MessageIndex, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageIndex), nil
	}
}

func (m messageIndexDo) Take() (*model.MessageIndex, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageIndex), nil
	}
}

func (m messageIndexDo) Last() (*model.MessageIndex, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageIndex), nil
	}
}

func (m messageIndexDo) Find() ([]*model.MessageIndex, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageIndex), err
}

func (m messageIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageIndex, err error) {
	buf := make([]*model.MessageIndex, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageIndexDo) FindInBatches(result *[]*model.MessageIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageIndexDo) Attrs(attrs ...field.AssignExpr) IMessageIndexDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageIndexDo) Assign(attrs ...field.AssignExpr) IMessageIndexDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageIndexDo) Joins(fields ...field.RelationField) IMessageIndexDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageIndexDo) Preload(fields ...field.RelationField) IMessageIndexDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageIndexDo) FirstOrInit() (*model.MessageIndex, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageIndex), nil
	}
}

func (m messageIndexDo) FirstOrCreate() (*model.MessageIndex, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageIndex), nil
	}
}

func (m messageIndexDo) FindByPage(offset int, limit int) (result []*model.MessageIndex, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageIndexDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageIndexDo) Delete(models ...*model.MessageIndex) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageIndexDo) withDO(do gen.Dao) *messageIndexDo {
	m.DO = *do.(*gen.DO)
	return m
}
