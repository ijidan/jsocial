// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminRoles(db *gorm.DB) goadminRoles {
	_goadminRoles := goadminRoles{}

	_goadminRoles.goadminRolesDo.UseDB(db)
	_goadminRoles.goadminRolesDo.UseModel(&model.GoadminRoles{})

	tableName := _goadminRoles.goadminRolesDo.TableName()
	_goadminRoles.ALL = field.NewAsterisk(tableName)
	_goadminRoles.ID = field.NewInt32(tableName, "id")
	_goadminRoles.Name = field.NewString(tableName, "name")
	_goadminRoles.Slug = field.NewString(tableName, "slug")
	_goadminRoles.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRoles.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRoles.fillFieldMap()

	return _goadminRoles
}

type goadminRoles struct {
	goadminRolesDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	Slug      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRoles) Table(newTableName string) *goadminRoles {
	g.goadminRolesDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminRoles) As(alias string) *goadminRoles {
	g.goadminRolesDo.DO = *(g.goadminRolesDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminRoles) updateTableName(table string) *goadminRoles {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Slug = field.NewString(table, "slug")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminRoles) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminRoles) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["slug"] = g.Slug
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRoles) clone(db *gorm.DB) goadminRoles {
	g.goadminRolesDo.ReplaceDB(db)
	return g
}

type goadminRolesDo struct{ gen.DO }

type IGoadminRolesDo interface {
	gen.SubQuery
	Debug() IGoadminRolesDo
	WithContext(ctx context.Context) IGoadminRolesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminRolesDo
	WriteDB() IGoadminRolesDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminRolesDo
	Not(conds ...gen.Condition) IGoadminRolesDo
	Or(conds ...gen.Condition) IGoadminRolesDo
	Select(conds ...field.Expr) IGoadminRolesDo
	Where(conds ...gen.Condition) IGoadminRolesDo
	Order(conds ...field.Expr) IGoadminRolesDo
	Distinct(cols ...field.Expr) IGoadminRolesDo
	Omit(cols ...field.Expr) IGoadminRolesDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminRolesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolesDo
	Group(cols ...field.Expr) IGoadminRolesDo
	Having(conds ...gen.Condition) IGoadminRolesDo
	Limit(limit int) IGoadminRolesDo
	Offset(offset int) IGoadminRolesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolesDo
	Unscoped() IGoadminRolesDo
	Create(values ...*model.GoadminRoles) error
	CreateInBatches(values []*model.GoadminRoles, batchSize int) error
	Save(values ...*model.GoadminRoles) error
	First() (*model.GoadminRoles, error)
	Take() (*model.GoadminRoles, error)
	Last() (*model.GoadminRoles, error)
	Find() ([]*model.GoadminRoles, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoles, err error)
	FindInBatches(result *[]*model.GoadminRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminRoles) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminRolesDo
	Assign(attrs ...field.AssignExpr) IGoadminRolesDo
	Joins(fields ...field.RelationField) IGoadminRolesDo
	Preload(fields ...field.RelationField) IGoadminRolesDo
	FirstOrInit() (*model.GoadminRoles, error)
	FirstOrCreate() (*model.GoadminRoles, error)
	FindByPage(offset int, limit int) (result []*model.GoadminRoles, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminRolesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminRolesDo) Debug() IGoadminRolesDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRolesDo) WithContext(ctx context.Context) IGoadminRolesDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRolesDo) ReadDB() IGoadminRolesDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminRolesDo) WriteDB() IGoadminRolesDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminRolesDo) Clauses(conds ...clause.Expression) IGoadminRolesDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRolesDo) Returning(value interface{}, columns ...string) IGoadminRolesDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminRolesDo) Not(conds ...gen.Condition) IGoadminRolesDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRolesDo) Or(conds ...gen.Condition) IGoadminRolesDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRolesDo) Select(conds ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRolesDo) Where(conds ...gen.Condition) IGoadminRolesDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRolesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminRolesDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminRolesDo) Order(conds ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRolesDo) Distinct(cols ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRolesDo) Omit(cols ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRolesDo) Join(table schema.Tabler, on ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRolesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRolesDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRolesDo) Group(cols ...field.Expr) IGoadminRolesDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRolesDo) Having(conds ...gen.Condition) IGoadminRolesDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRolesDo) Limit(limit int) IGoadminRolesDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRolesDo) Offset(offset int) IGoadminRolesDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRolesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolesDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRolesDo) Unscoped() IGoadminRolesDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRolesDo) Create(values ...*model.GoadminRoles) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRolesDo) CreateInBatches(values []*model.GoadminRoles, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRolesDo) Save(values ...*model.GoadminRoles) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRolesDo) First() (*model.GoadminRoles, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoles), nil
	}
}

func (g goadminRolesDo) Take() (*model.GoadminRoles, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoles), nil
	}
}

func (g goadminRolesDo) Last() (*model.GoadminRoles, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoles), nil
	}
}

func (g goadminRolesDo) Find() ([]*model.GoadminRoles, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminRoles), err
}

func (g goadminRolesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoles, err error) {
	buf := make([]*model.GoadminRoles, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRolesDo) FindInBatches(result *[]*model.GoadminRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRolesDo) Attrs(attrs ...field.AssignExpr) IGoadminRolesDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRolesDo) Assign(attrs ...field.AssignExpr) IGoadminRolesDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRolesDo) Joins(fields ...field.RelationField) IGoadminRolesDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminRolesDo) Preload(fields ...field.RelationField) IGoadminRolesDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminRolesDo) FirstOrInit() (*model.GoadminRoles, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoles), nil
	}
}

func (g goadminRolesDo) FirstOrCreate() (*model.GoadminRoles, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoles), nil
	}
}

func (g goadminRolesDo) FindByPage(offset int, limit int) (result []*model.GoadminRoles, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminRolesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminRolesDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminRolesDo) Delete(models ...*model.GoadminRoles) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminRolesDo) withDO(do gen.Dao) *goadminRolesDo {
	g.DO = *do.(*gen.DO)
	return g
}
