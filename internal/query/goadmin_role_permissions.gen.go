// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminRolePermissions(db *gorm.DB) goadminRolePermissions {
	_goadminRolePermissions := goadminRolePermissions{}

	_goadminRolePermissions.goadminRolePermissionsDo.UseDB(db)
	_goadminRolePermissions.goadminRolePermissionsDo.UseModel(&model.GoadminRolePermissions{})

	tableName := _goadminRolePermissions.goadminRolePermissionsDo.TableName()
	_goadminRolePermissions.ALL = field.NewAsterisk(tableName)
	_goadminRolePermissions.RoleID = field.NewInt32(tableName, "role_id")
	_goadminRolePermissions.PermissionID = field.NewInt32(tableName, "permission_id")
	_goadminRolePermissions.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRolePermissions.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRolePermissions.fillFieldMap()

	return _goadminRolePermissions
}

type goadminRolePermissions struct {
	goadminRolePermissionsDo

	ALL          field.Asterisk
	RoleID       field.Int32
	PermissionID field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRolePermissions) Table(newTableName string) *goadminRolePermissions {
	g.goadminRolePermissionsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminRolePermissions) As(alias string) *goadminRolePermissions {
	g.goadminRolePermissionsDo.DO = *(g.goadminRolePermissionsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminRolePermissions) updateTableName(table string) *goadminRolePermissions {
	g.ALL = field.NewAsterisk(table)
	g.RoleID = field.NewInt32(table, "role_id")
	g.PermissionID = field.NewInt32(table, "permission_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminRolePermissions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminRolePermissions) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["role_id"] = g.RoleID
	g.fieldMap["permission_id"] = g.PermissionID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRolePermissions) clone(db *gorm.DB) goadminRolePermissions {
	g.goadminRolePermissionsDo.ReplaceDB(db)
	return g
}

type goadminRolePermissionsDo struct{ gen.DO }

type IGoadminRolePermissionsDo interface {
	gen.SubQuery
	Debug() IGoadminRolePermissionsDo
	WithContext(ctx context.Context) IGoadminRolePermissionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminRolePermissionsDo
	WriteDB() IGoadminRolePermissionsDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminRolePermissionsDo
	Not(conds ...gen.Condition) IGoadminRolePermissionsDo
	Or(conds ...gen.Condition) IGoadminRolePermissionsDo
	Select(conds ...field.Expr) IGoadminRolePermissionsDo
	Where(conds ...gen.Condition) IGoadminRolePermissionsDo
	Order(conds ...field.Expr) IGoadminRolePermissionsDo
	Distinct(cols ...field.Expr) IGoadminRolePermissionsDo
	Omit(cols ...field.Expr) IGoadminRolePermissionsDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo
	Group(cols ...field.Expr) IGoadminRolePermissionsDo
	Having(conds ...gen.Condition) IGoadminRolePermissionsDo
	Limit(limit int) IGoadminRolePermissionsDo
	Offset(offset int) IGoadminRolePermissionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolePermissionsDo
	Unscoped() IGoadminRolePermissionsDo
	Create(values ...*model.GoadminRolePermissions) error
	CreateInBatches(values []*model.GoadminRolePermissions, batchSize int) error
	Save(values ...*model.GoadminRolePermissions) error
	First() (*model.GoadminRolePermissions, error)
	Take() (*model.GoadminRolePermissions, error)
	Last() (*model.GoadminRolePermissions, error)
	Find() ([]*model.GoadminRolePermissions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRolePermissions, err error)
	FindInBatches(result *[]*model.GoadminRolePermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminRolePermissions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminRolePermissionsDo
	Assign(attrs ...field.AssignExpr) IGoadminRolePermissionsDo
	Joins(fields ...field.RelationField) IGoadminRolePermissionsDo
	Preload(fields ...field.RelationField) IGoadminRolePermissionsDo
	FirstOrInit() (*model.GoadminRolePermissions, error)
	FirstOrCreate() (*model.GoadminRolePermissions, error)
	FindByPage(offset int, limit int) (result []*model.GoadminRolePermissions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminRolePermissionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminRolePermissionsDo) Debug() IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRolePermissionsDo) WithContext(ctx context.Context) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRolePermissionsDo) ReadDB() IGoadminRolePermissionsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminRolePermissionsDo) WriteDB() IGoadminRolePermissionsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminRolePermissionsDo) Clauses(conds ...clause.Expression) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRolePermissionsDo) Returning(value interface{}, columns ...string) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminRolePermissionsDo) Not(conds ...gen.Condition) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRolePermissionsDo) Or(conds ...gen.Condition) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRolePermissionsDo) Select(conds ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRolePermissionsDo) Where(conds ...gen.Condition) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRolePermissionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminRolePermissionsDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminRolePermissionsDo) Order(conds ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRolePermissionsDo) Distinct(cols ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRolePermissionsDo) Omit(cols ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRolePermissionsDo) Join(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRolePermissionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRolePermissionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRolePermissionsDo) Group(cols ...field.Expr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRolePermissionsDo) Having(conds ...gen.Condition) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRolePermissionsDo) Limit(limit int) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRolePermissionsDo) Offset(offset int) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRolePermissionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRolePermissionsDo) Unscoped() IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRolePermissionsDo) Create(values ...*model.GoadminRolePermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRolePermissionsDo) CreateInBatches(values []*model.GoadminRolePermissions, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRolePermissionsDo) Save(values ...*model.GoadminRolePermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRolePermissionsDo) First() (*model.GoadminRolePermissions, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermissions), nil
	}
}

func (g goadminRolePermissionsDo) Take() (*model.GoadminRolePermissions, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermissions), nil
	}
}

func (g goadminRolePermissionsDo) Last() (*model.GoadminRolePermissions, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermissions), nil
	}
}

func (g goadminRolePermissionsDo) Find() ([]*model.GoadminRolePermissions, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminRolePermissions), err
}

func (g goadminRolePermissionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRolePermissions, err error) {
	buf := make([]*model.GoadminRolePermissions, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRolePermissionsDo) FindInBatches(result *[]*model.GoadminRolePermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRolePermissionsDo) Attrs(attrs ...field.AssignExpr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRolePermissionsDo) Assign(attrs ...field.AssignExpr) IGoadminRolePermissionsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRolePermissionsDo) Joins(fields ...field.RelationField) IGoadminRolePermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminRolePermissionsDo) Preload(fields ...field.RelationField) IGoadminRolePermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminRolePermissionsDo) FirstOrInit() (*model.GoadminRolePermissions, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermissions), nil
	}
}

func (g goadminRolePermissionsDo) FirstOrCreate() (*model.GoadminRolePermissions, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermissions), nil
	}
}

func (g goadminRolePermissionsDo) FindByPage(offset int, limit int) (result []*model.GoadminRolePermissions, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminRolePermissionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminRolePermissionsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminRolePermissionsDo) Delete(models ...*model.GoadminRolePermissions) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminRolePermissionsDo) withDO(do gen.Dao) *goadminRolePermissionsDo {
	g.DO = *do.(*gen.DO)
	return g
}
