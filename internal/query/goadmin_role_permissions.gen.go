// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminRolePermission(db *gorm.DB) goadminRolePermission {
	_goadminRolePermission := goadminRolePermission{}

	_goadminRolePermission.goadminRolePermissionDo.UseDB(db)
	_goadminRolePermission.goadminRolePermissionDo.UseModel(&model.GoadminRolePermission{})

	tableName := _goadminRolePermission.goadminRolePermissionDo.TableName()
	_goadminRolePermission.ALL = field.NewAsterisk(tableName)
	_goadminRolePermission.RoleID = field.NewInt32(tableName, "role_id")
	_goadminRolePermission.PermissionID = field.NewInt32(tableName, "permission_id")
	_goadminRolePermission.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRolePermission.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRolePermission.fillFieldMap()

	return _goadminRolePermission
}

type goadminRolePermission struct {
	goadminRolePermissionDo goadminRolePermissionDo

	ALL          field.Asterisk
	RoleID       field.Int32
	PermissionID field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRolePermission) Table(newTableName string) *goadminRolePermission {
	g.goadminRolePermissionDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminRolePermission) As(alias string) *goadminRolePermission {
	g.goadminRolePermissionDo.DO = *(g.goadminRolePermissionDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminRolePermission) updateTableName(table string) *goadminRolePermission {
	g.ALL = field.NewAsterisk(table)
	g.RoleID = field.NewInt32(table, "role_id")
	g.PermissionID = field.NewInt32(table, "permission_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminRolePermission) WithContext(ctx context.Context) IGoadminRolePermissionDo {
	return g.goadminRolePermissionDo.WithContext(ctx)
}

func (g goadminRolePermission) TableName() string { return g.goadminRolePermissionDo.TableName() }

func (g goadminRolePermission) Alias() string { return g.goadminRolePermissionDo.Alias() }

func (g *goadminRolePermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminRolePermission) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["role_id"] = g.RoleID
	g.fieldMap["permission_id"] = g.PermissionID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRolePermission) clone(db *gorm.DB) goadminRolePermission {
	g.goadminRolePermissionDo.ReplaceDB(db)
	return g
}

type goadminRolePermissionDo struct{ gen.DO }

type IGoadminRolePermissionDo interface {
	gen.SubQuery
	Debug() IGoadminRolePermissionDo
	WithContext(ctx context.Context) IGoadminRolePermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminRolePermissionDo
	WriteDB() IGoadminRolePermissionDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminRolePermissionDo
	Not(conds ...gen.Condition) IGoadminRolePermissionDo
	Or(conds ...gen.Condition) IGoadminRolePermissionDo
	Select(conds ...field.Expr) IGoadminRolePermissionDo
	Where(conds ...gen.Condition) IGoadminRolePermissionDo
	Order(conds ...field.Expr) IGoadminRolePermissionDo
	Distinct(cols ...field.Expr) IGoadminRolePermissionDo
	Omit(cols ...field.Expr) IGoadminRolePermissionDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo
	Group(cols ...field.Expr) IGoadminRolePermissionDo
	Having(conds ...gen.Condition) IGoadminRolePermissionDo
	Limit(limit int) IGoadminRolePermissionDo
	Offset(offset int) IGoadminRolePermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolePermissionDo
	Unscoped() IGoadminRolePermissionDo
	Create(values ...*model.GoadminRolePermission) error
	CreateInBatches(values []*model.GoadminRolePermission, batchSize int) error
	Save(values ...*model.GoadminRolePermission) error
	First() (*model.GoadminRolePermission, error)
	Take() (*model.GoadminRolePermission, error)
	Last() (*model.GoadminRolePermission, error)
	Find() ([]*model.GoadminRolePermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRolePermission, err error)
	FindInBatches(result *[]*model.GoadminRolePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminRolePermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminRolePermissionDo
	Assign(attrs ...field.AssignExpr) IGoadminRolePermissionDo
	Joins(fields ...field.RelationField) IGoadminRolePermissionDo
	Preload(fields ...field.RelationField) IGoadminRolePermissionDo
	FirstOrInit() (*model.GoadminRolePermission, error)
	FirstOrCreate() (*model.GoadminRolePermission, error)
	FindByPage(offset int, limit int) (result []*model.GoadminRolePermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminRolePermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetById(id int) (result *model.GoadminRolePermission, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (g goadminRolePermissionDo) GetById(id int) (result *model.GoadminRolePermission, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM goadmin_role_permissions WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

func (g goadminRolePermissionDo) Debug() IGoadminRolePermissionDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRolePermissionDo) WithContext(ctx context.Context) IGoadminRolePermissionDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRolePermissionDo) ReadDB() IGoadminRolePermissionDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminRolePermissionDo) WriteDB() IGoadminRolePermissionDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminRolePermissionDo) Clauses(conds ...clause.Expression) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRolePermissionDo) Returning(value interface{}, columns ...string) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminRolePermissionDo) Not(conds ...gen.Condition) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRolePermissionDo) Or(conds ...gen.Condition) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRolePermissionDo) Select(conds ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRolePermissionDo) Where(conds ...gen.Condition) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRolePermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminRolePermissionDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminRolePermissionDo) Order(conds ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRolePermissionDo) Distinct(cols ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRolePermissionDo) Omit(cols ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRolePermissionDo) Join(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRolePermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRolePermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRolePermissionDo) Group(cols ...field.Expr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRolePermissionDo) Having(conds ...gen.Condition) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRolePermissionDo) Limit(limit int) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRolePermissionDo) Offset(offset int) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRolePermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRolePermissionDo) Unscoped() IGoadminRolePermissionDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRolePermissionDo) Create(values ...*model.GoadminRolePermission) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRolePermissionDo) CreateInBatches(values []*model.GoadminRolePermission, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRolePermissionDo) Save(values ...*model.GoadminRolePermission) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRolePermissionDo) First() (*model.GoadminRolePermission, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermission), nil
	}
}

func (g goadminRolePermissionDo) Take() (*model.GoadminRolePermission, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermission), nil
	}
}

func (g goadminRolePermissionDo) Last() (*model.GoadminRolePermission, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermission), nil
	}
}

func (g goadminRolePermissionDo) Find() ([]*model.GoadminRolePermission, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminRolePermission), err
}

func (g goadminRolePermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRolePermission, err error) {
	buf := make([]*model.GoadminRolePermission, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRolePermissionDo) FindInBatches(result *[]*model.GoadminRolePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRolePermissionDo) Attrs(attrs ...field.AssignExpr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRolePermissionDo) Assign(attrs ...field.AssignExpr) IGoadminRolePermissionDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRolePermissionDo) Joins(fields ...field.RelationField) IGoadminRolePermissionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminRolePermissionDo) Preload(fields ...field.RelationField) IGoadminRolePermissionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminRolePermissionDo) FirstOrInit() (*model.GoadminRolePermission, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermission), nil
	}
}

func (g goadminRolePermissionDo) FirstOrCreate() (*model.GoadminRolePermission, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRolePermission), nil
	}
}

func (g goadminRolePermissionDo) FindByPage(offset int, limit int) (result []*model.GoadminRolePermission, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminRolePermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminRolePermissionDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminRolePermissionDo) Delete(models ...*model.GoadminRolePermission) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminRolePermissionDo) withDO(do gen.Dao) *goadminRolePermissionDo {
	g.DO = *do.(*gen.DO)
	return g
}
