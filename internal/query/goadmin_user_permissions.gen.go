// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminUserPermissions(db *gorm.DB) goadminUserPermissions {
	_goadminUserPermissions := goadminUserPermissions{}

	_goadminUserPermissions.goadminUserPermissionsDo.UseDB(db)
	_goadminUserPermissions.goadminUserPermissionsDo.UseModel(&model.GoadminUserPermissions{})

	tableName := _goadminUserPermissions.goadminUserPermissionsDo.TableName()
	_goadminUserPermissions.ALL = field.NewAsterisk(tableName)
	_goadminUserPermissions.UserID = field.NewInt32(tableName, "user_id")
	_goadminUserPermissions.PermissionID = field.NewInt32(tableName, "permission_id")
	_goadminUserPermissions.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminUserPermissions.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminUserPermissions.fillFieldMap()

	return _goadminUserPermissions
}

type goadminUserPermissions struct {
	goadminUserPermissionsDo

	ALL          field.Asterisk
	UserID       field.Int32
	PermissionID field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (g goadminUserPermissions) Table(newTableName string) *goadminUserPermissions {
	g.goadminUserPermissionsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminUserPermissions) As(alias string) *goadminUserPermissions {
	g.goadminUserPermissionsDo.DO = *(g.goadminUserPermissionsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminUserPermissions) updateTableName(table string) *goadminUserPermissions {
	g.ALL = field.NewAsterisk(table)
	g.UserID = field.NewInt32(table, "user_id")
	g.PermissionID = field.NewInt32(table, "permission_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminUserPermissions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminUserPermissions) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["permission_id"] = g.PermissionID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminUserPermissions) clone(db *gorm.DB) goadminUserPermissions {
	g.goadminUserPermissionsDo.ReplaceDB(db)
	return g
}

type goadminUserPermissionsDo struct{ gen.DO }

type IGoadminUserPermissionsDo interface {
	gen.SubQuery
	Debug() IGoadminUserPermissionsDo
	WithContext(ctx context.Context) IGoadminUserPermissionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminUserPermissionsDo
	WriteDB() IGoadminUserPermissionsDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminUserPermissionsDo
	Not(conds ...gen.Condition) IGoadminUserPermissionsDo
	Or(conds ...gen.Condition) IGoadminUserPermissionsDo
	Select(conds ...field.Expr) IGoadminUserPermissionsDo
	Where(conds ...gen.Condition) IGoadminUserPermissionsDo
	Order(conds ...field.Expr) IGoadminUserPermissionsDo
	Distinct(cols ...field.Expr) IGoadminUserPermissionsDo
	Omit(cols ...field.Expr) IGoadminUserPermissionsDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo
	Group(cols ...field.Expr) IGoadminUserPermissionsDo
	Having(conds ...gen.Condition) IGoadminUserPermissionsDo
	Limit(limit int) IGoadminUserPermissionsDo
	Offset(offset int) IGoadminUserPermissionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminUserPermissionsDo
	Unscoped() IGoadminUserPermissionsDo
	Create(values ...*model.GoadminUserPermissions) error
	CreateInBatches(values []*model.GoadminUserPermissions, batchSize int) error
	Save(values ...*model.GoadminUserPermissions) error
	First() (*model.GoadminUserPermissions, error)
	Take() (*model.GoadminUserPermissions, error)
	Last() (*model.GoadminUserPermissions, error)
	Find() ([]*model.GoadminUserPermissions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminUserPermissions, err error)
	FindInBatches(result *[]*model.GoadminUserPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminUserPermissions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminUserPermissionsDo
	Assign(attrs ...field.AssignExpr) IGoadminUserPermissionsDo
	Joins(fields ...field.RelationField) IGoadminUserPermissionsDo
	Preload(fields ...field.RelationField) IGoadminUserPermissionsDo
	FirstOrInit() (*model.GoadminUserPermissions, error)
	FirstOrCreate() (*model.GoadminUserPermissions, error)
	FindByPage(offset int, limit int) (result []*model.GoadminUserPermissions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminUserPermissionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminUserPermissionsDo) Debug() IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminUserPermissionsDo) WithContext(ctx context.Context) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminUserPermissionsDo) ReadDB() IGoadminUserPermissionsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminUserPermissionsDo) WriteDB() IGoadminUserPermissionsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminUserPermissionsDo) Clauses(conds ...clause.Expression) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminUserPermissionsDo) Returning(value interface{}, columns ...string) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminUserPermissionsDo) Not(conds ...gen.Condition) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminUserPermissionsDo) Or(conds ...gen.Condition) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminUserPermissionsDo) Select(conds ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminUserPermissionsDo) Where(conds ...gen.Condition) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminUserPermissionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminUserPermissionsDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminUserPermissionsDo) Order(conds ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminUserPermissionsDo) Distinct(cols ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminUserPermissionsDo) Omit(cols ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminUserPermissionsDo) Join(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminUserPermissionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminUserPermissionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminUserPermissionsDo) Group(cols ...field.Expr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminUserPermissionsDo) Having(conds ...gen.Condition) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminUserPermissionsDo) Limit(limit int) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminUserPermissionsDo) Offset(offset int) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminUserPermissionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminUserPermissionsDo) Unscoped() IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminUserPermissionsDo) Create(values ...*model.GoadminUserPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminUserPermissionsDo) CreateInBatches(values []*model.GoadminUserPermissions, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminUserPermissionsDo) Save(values ...*model.GoadminUserPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminUserPermissionsDo) First() (*model.GoadminUserPermissions, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUserPermissions), nil
	}
}

func (g goadminUserPermissionsDo) Take() (*model.GoadminUserPermissions, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUserPermissions), nil
	}
}

func (g goadminUserPermissionsDo) Last() (*model.GoadminUserPermissions, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUserPermissions), nil
	}
}

func (g goadminUserPermissionsDo) Find() ([]*model.GoadminUserPermissions, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminUserPermissions), err
}

func (g goadminUserPermissionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminUserPermissions, err error) {
	buf := make([]*model.GoadminUserPermissions, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminUserPermissionsDo) FindInBatches(result *[]*model.GoadminUserPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminUserPermissionsDo) Attrs(attrs ...field.AssignExpr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminUserPermissionsDo) Assign(attrs ...field.AssignExpr) IGoadminUserPermissionsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminUserPermissionsDo) Joins(fields ...field.RelationField) IGoadminUserPermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminUserPermissionsDo) Preload(fields ...field.RelationField) IGoadminUserPermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminUserPermissionsDo) FirstOrInit() (*model.GoadminUserPermissions, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUserPermissions), nil
	}
}

func (g goadminUserPermissionsDo) FirstOrCreate() (*model.GoadminUserPermissions, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUserPermissions), nil
	}
}

func (g goadminUserPermissionsDo) FindByPage(offset int, limit int) (result []*model.GoadminUserPermissions, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminUserPermissionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminUserPermissionsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminUserPermissionsDo) Delete(models ...*model.GoadminUserPermissions) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminUserPermissionsDo) withDO(do gen.Dao) *goadminUserPermissionsDo {
	g.DO = *do.(*gen.DO)
	return g
}
