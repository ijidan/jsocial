// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminPermissions(db *gorm.DB) goadminPermissions {
	_goadminPermissions := goadminPermissions{}

	_goadminPermissions.goadminPermissionsDo.UseDB(db)
	_goadminPermissions.goadminPermissionsDo.UseModel(&model.GoadminPermissions{})

	tableName := _goadminPermissions.goadminPermissionsDo.TableName()
	_goadminPermissions.ALL = field.NewAsterisk(tableName)
	_goadminPermissions.ID = field.NewInt32(tableName, "id")
	_goadminPermissions.Name = field.NewString(tableName, "name")
	_goadminPermissions.Slug = field.NewString(tableName, "slug")
	_goadminPermissions.HTTPMethod = field.NewString(tableName, "http_method")
	_goadminPermissions.HTTPPath = field.NewString(tableName, "http_path")
	_goadminPermissions.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminPermissions.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminPermissions.fillFieldMap()

	return _goadminPermissions
}

type goadminPermissions struct {
	goadminPermissionsDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Slug       field.String
	HTTPMethod field.String
	HTTPPath   field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (g goadminPermissions) Table(newTableName string) *goadminPermissions {
	g.goadminPermissionsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminPermissions) As(alias string) *goadminPermissions {
	g.goadminPermissionsDo.DO = *(g.goadminPermissionsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminPermissions) updateTableName(table string) *goadminPermissions {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Slug = field.NewString(table, "slug")
	g.HTTPMethod = field.NewString(table, "http_method")
	g.HTTPPath = field.NewString(table, "http_path")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminPermissions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminPermissions) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["slug"] = g.Slug
	g.fieldMap["http_method"] = g.HTTPMethod
	g.fieldMap["http_path"] = g.HTTPPath
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminPermissions) clone(db *gorm.DB) goadminPermissions {
	g.goadminPermissionsDo.ReplaceDB(db)
	return g
}

type goadminPermissionsDo struct{ gen.DO }

type IGoadminPermissionsDo interface {
	gen.SubQuery
	Debug() IGoadminPermissionsDo
	WithContext(ctx context.Context) IGoadminPermissionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminPermissionsDo
	WriteDB() IGoadminPermissionsDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminPermissionsDo
	Not(conds ...gen.Condition) IGoadminPermissionsDo
	Or(conds ...gen.Condition) IGoadminPermissionsDo
	Select(conds ...field.Expr) IGoadminPermissionsDo
	Where(conds ...gen.Condition) IGoadminPermissionsDo
	Order(conds ...field.Expr) IGoadminPermissionsDo
	Distinct(cols ...field.Expr) IGoadminPermissionsDo
	Omit(cols ...field.Expr) IGoadminPermissionsDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo
	Group(cols ...field.Expr) IGoadminPermissionsDo
	Having(conds ...gen.Condition) IGoadminPermissionsDo
	Limit(limit int) IGoadminPermissionsDo
	Offset(offset int) IGoadminPermissionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminPermissionsDo
	Unscoped() IGoadminPermissionsDo
	Create(values ...*model.GoadminPermissions) error
	CreateInBatches(values []*model.GoadminPermissions, batchSize int) error
	Save(values ...*model.GoadminPermissions) error
	First() (*model.GoadminPermissions, error)
	Take() (*model.GoadminPermissions, error)
	Last() (*model.GoadminPermissions, error)
	Find() ([]*model.GoadminPermissions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminPermissions, err error)
	FindInBatches(result *[]*model.GoadminPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminPermissions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminPermissionsDo
	Assign(attrs ...field.AssignExpr) IGoadminPermissionsDo
	Joins(fields ...field.RelationField) IGoadminPermissionsDo
	Preload(fields ...field.RelationField) IGoadminPermissionsDo
	FirstOrInit() (*model.GoadminPermissions, error)
	FirstOrCreate() (*model.GoadminPermissions, error)
	FindByPage(offset int, limit int) (result []*model.GoadminPermissions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminPermissionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminPermissionsDo) Debug() IGoadminPermissionsDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminPermissionsDo) WithContext(ctx context.Context) IGoadminPermissionsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminPermissionsDo) ReadDB() IGoadminPermissionsDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminPermissionsDo) WriteDB() IGoadminPermissionsDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminPermissionsDo) Clauses(conds ...clause.Expression) IGoadminPermissionsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminPermissionsDo) Returning(value interface{}, columns ...string) IGoadminPermissionsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminPermissionsDo) Not(conds ...gen.Condition) IGoadminPermissionsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminPermissionsDo) Or(conds ...gen.Condition) IGoadminPermissionsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminPermissionsDo) Select(conds ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminPermissionsDo) Where(conds ...gen.Condition) IGoadminPermissionsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminPermissionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminPermissionsDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminPermissionsDo) Order(conds ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminPermissionsDo) Distinct(cols ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminPermissionsDo) Omit(cols ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminPermissionsDo) Join(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminPermissionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminPermissionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminPermissionsDo) Group(cols ...field.Expr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminPermissionsDo) Having(conds ...gen.Condition) IGoadminPermissionsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminPermissionsDo) Limit(limit int) IGoadminPermissionsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminPermissionsDo) Offset(offset int) IGoadminPermissionsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminPermissionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminPermissionsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminPermissionsDo) Unscoped() IGoadminPermissionsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminPermissionsDo) Create(values ...*model.GoadminPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminPermissionsDo) CreateInBatches(values []*model.GoadminPermissions, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminPermissionsDo) Save(values ...*model.GoadminPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminPermissionsDo) First() (*model.GoadminPermissions, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminPermissions), nil
	}
}

func (g goadminPermissionsDo) Take() (*model.GoadminPermissions, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminPermissions), nil
	}
}

func (g goadminPermissionsDo) Last() (*model.GoadminPermissions, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminPermissions), nil
	}
}

func (g goadminPermissionsDo) Find() ([]*model.GoadminPermissions, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminPermissions), err
}

func (g goadminPermissionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminPermissions, err error) {
	buf := make([]*model.GoadminPermissions, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminPermissionsDo) FindInBatches(result *[]*model.GoadminPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminPermissionsDo) Attrs(attrs ...field.AssignExpr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminPermissionsDo) Assign(attrs ...field.AssignExpr) IGoadminPermissionsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminPermissionsDo) Joins(fields ...field.RelationField) IGoadminPermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminPermissionsDo) Preload(fields ...field.RelationField) IGoadminPermissionsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminPermissionsDo) FirstOrInit() (*model.GoadminPermissions, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminPermissions), nil
	}
}

func (g goadminPermissionsDo) FirstOrCreate() (*model.GoadminPermissions, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminPermissions), nil
	}
}

func (g goadminPermissionsDo) FindByPage(offset int, limit int) (result []*model.GoadminPermissions, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminPermissionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminPermissionsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminPermissionsDo) Delete(models ...*model.GoadminPermissions) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminPermissionsDo) withDO(do gen.Dao) *goadminPermissionsDo {
	g.DO = *do.(*gen.DO)
	return g
}
