// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGid(db *gorm.DB) gid {
	_gid := gid{}

	_gid.gidDo.UseDB(db)
	_gid.gidDo.UseModel(&model.Gid{})

	tableName := _gid.gidDo.TableName()
	_gid.ALL = field.NewAsterisk(tableName)
	_gid.ID = field.NewInt64(tableName, "id")
	_gid.BusinessID = field.NewString(tableName, "business_id")
	_gid.MaxID = field.NewInt64(tableName, "max_id")
	_gid.Step = field.NewInt32(tableName, "step")
	_gid.Description = field.NewString(tableName, "description")
	_gid.CreateTime = field.NewTime(tableName, "create_time")
	_gid.UpdateTime = field.NewTime(tableName, "update_time")

	_gid.fillFieldMap()

	return _gid
}

type gid struct {
	gidDo

	ALL         field.Asterisk
	ID          field.Int64  // 自增主键
	BusinessID  field.String // 业务id
	MaxID       field.Int64  // 最大id
	Step        field.Int32  // 步长
	Description field.String // 描述
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (g gid) Table(newTableName string) *gid {
	g.gidDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gid) As(alias string) *gid {
	g.gidDo.DO = *(g.gidDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gid) updateTableName(table string) *gid {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.BusinessID = field.NewString(table, "business_id")
	g.MaxID = field.NewInt64(table, "max_id")
	g.Step = field.NewInt32(table, "step")
	g.Description = field.NewString(table, "description")
	g.CreateTime = field.NewTime(table, "create_time")
	g.UpdateTime = field.NewTime(table, "update_time")

	g.fillFieldMap()

	return g
}

func (g *gid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gid) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["business_id"] = g.BusinessID
	g.fieldMap["max_id"] = g.MaxID
	g.fieldMap["step"] = g.Step
	g.fieldMap["description"] = g.Description
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
}

func (g gid) clone(db *gorm.DB) gid {
	g.gidDo.ReplaceDB(db)
	return g
}

type gidDo struct{ gen.DO }

type IGidDo interface {
	gen.SubQuery
	Debug() IGidDo
	WithContext(ctx context.Context) IGidDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGidDo
	WriteDB() IGidDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGidDo
	Not(conds ...gen.Condition) IGidDo
	Or(conds ...gen.Condition) IGidDo
	Select(conds ...field.Expr) IGidDo
	Where(conds ...gen.Condition) IGidDo
	Order(conds ...field.Expr) IGidDo
	Distinct(cols ...field.Expr) IGidDo
	Omit(cols ...field.Expr) IGidDo
	Join(table schema.Tabler, on ...field.Expr) IGidDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGidDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGidDo
	Group(cols ...field.Expr) IGidDo
	Having(conds ...gen.Condition) IGidDo
	Limit(limit int) IGidDo
	Offset(offset int) IGidDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGidDo
	Unscoped() IGidDo
	Create(values ...*model.Gid) error
	CreateInBatches(values []*model.Gid, batchSize int) error
	Save(values ...*model.Gid) error
	First() (*model.Gid, error)
	Take() (*model.Gid, error)
	Last() (*model.Gid, error)
	Find() ([]*model.Gid, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gid, err error)
	FindInBatches(result *[]*model.Gid, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Gid) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGidDo
	Assign(attrs ...field.AssignExpr) IGidDo
	Joins(fields ...field.RelationField) IGidDo
	Preload(fields ...field.RelationField) IGidDo
	FirstOrInit() (*model.Gid, error)
	FirstOrCreate() (*model.Gid, error)
	FindByPage(offset int, limit int) (result []*model.Gid, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGidDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gidDo) Debug() IGidDo {
	return g.withDO(g.DO.Debug())
}

func (g gidDo) WithContext(ctx context.Context) IGidDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gidDo) ReadDB() IGidDo {
	return g.Clauses(dbresolver.Read)
}

func (g gidDo) WriteDB() IGidDo {
	return g.Clauses(dbresolver.Write)
}

func (g gidDo) Clauses(conds ...clause.Expression) IGidDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gidDo) Returning(value interface{}, columns ...string) IGidDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gidDo) Not(conds ...gen.Condition) IGidDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gidDo) Or(conds ...gen.Condition) IGidDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gidDo) Select(conds ...field.Expr) IGidDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gidDo) Where(conds ...gen.Condition) IGidDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gidDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGidDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gidDo) Order(conds ...field.Expr) IGidDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gidDo) Distinct(cols ...field.Expr) IGidDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gidDo) Omit(cols ...field.Expr) IGidDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gidDo) Join(table schema.Tabler, on ...field.Expr) IGidDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gidDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGidDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gidDo) RightJoin(table schema.Tabler, on ...field.Expr) IGidDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gidDo) Group(cols ...field.Expr) IGidDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gidDo) Having(conds ...gen.Condition) IGidDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gidDo) Limit(limit int) IGidDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gidDo) Offset(offset int) IGidDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGidDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gidDo) Unscoped() IGidDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gidDo) Create(values ...*model.Gid) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gidDo) CreateInBatches(values []*model.Gid, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gidDo) Save(values ...*model.Gid) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gidDo) First() (*model.Gid, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gid), nil
	}
}

func (g gidDo) Take() (*model.Gid, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gid), nil
	}
}

func (g gidDo) Last() (*model.Gid, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gid), nil
	}
}

func (g gidDo) Find() ([]*model.Gid, error) {
	result, err := g.DO.Find()
	return result.([]*model.Gid), err
}

func (g gidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gid, err error) {
	buf := make([]*model.Gid, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gidDo) FindInBatches(result *[]*model.Gid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gidDo) Attrs(attrs ...field.AssignExpr) IGidDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gidDo) Assign(attrs ...field.AssignExpr) IGidDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gidDo) Joins(fields ...field.RelationField) IGidDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gidDo) Preload(fields ...field.RelationField) IGidDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gidDo) FirstOrInit() (*model.Gid, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gid), nil
	}
}

func (g gidDo) FirstOrCreate() (*model.Gid, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gid), nil
	}
}

func (g gidDo) FindByPage(offset int, limit int) (result []*model.Gid, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gidDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gidDo) Delete(models ...*model.Gid) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gidDo) withDO(do gen.Dao) *gidDo {
	g.DO = *do.(*gen.DO)
	return g
}
