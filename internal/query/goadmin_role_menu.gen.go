// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminRoleMenu(db *gorm.DB) goadminRoleMenu {
	_goadminRoleMenu := goadminRoleMenu{}

	_goadminRoleMenu.goadminRoleMenuDo.UseDB(db)
	_goadminRoleMenu.goadminRoleMenuDo.UseModel(&model.GoadminRoleMenu{})

	tableName := _goadminRoleMenu.goadminRoleMenuDo.TableName()
	_goadminRoleMenu.ALL = field.NewAsterisk(tableName)
	_goadminRoleMenu.RoleID = field.NewInt32(tableName, "role_id")
	_goadminRoleMenu.MenuID = field.NewInt32(tableName, "menu_id")
	_goadminRoleMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRoleMenu.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRoleMenu.fillFieldMap()

	return _goadminRoleMenu
}

type goadminRoleMenu struct {
	goadminRoleMenuDo goadminRoleMenuDo

	ALL       field.Asterisk
	RoleID    field.Int32
	MenuID    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRoleMenu) Table(newTableName string) *goadminRoleMenu {
	g.goadminRoleMenuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminRoleMenu) As(alias string) *goadminRoleMenu {
	g.goadminRoleMenuDo.DO = *(g.goadminRoleMenuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminRoleMenu) updateTableName(table string) *goadminRoleMenu {
	g.ALL = field.NewAsterisk(table)
	g.RoleID = field.NewInt32(table, "role_id")
	g.MenuID = field.NewInt32(table, "menu_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminRoleMenu) WithContext(ctx context.Context) IGoadminRoleMenuDo {
	return g.goadminRoleMenuDo.WithContext(ctx)
}

func (g goadminRoleMenu) TableName() string { return g.goadminRoleMenuDo.TableName() }

func (g goadminRoleMenu) Alias() string { return g.goadminRoleMenuDo.Alias() }

func (g *goadminRoleMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminRoleMenu) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["role_id"] = g.RoleID
	g.fieldMap["menu_id"] = g.MenuID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRoleMenu) clone(db *gorm.DB) goadminRoleMenu {
	g.goadminRoleMenuDo.ReplaceDB(db)
	return g
}

type goadminRoleMenuDo struct{ gen.DO }

type IGoadminRoleMenuDo interface {
	gen.SubQuery
	Debug() IGoadminRoleMenuDo
	WithContext(ctx context.Context) IGoadminRoleMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminRoleMenuDo
	WriteDB() IGoadminRoleMenuDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminRoleMenuDo
	Not(conds ...gen.Condition) IGoadminRoleMenuDo
	Or(conds ...gen.Condition) IGoadminRoleMenuDo
	Select(conds ...field.Expr) IGoadminRoleMenuDo
	Where(conds ...gen.Condition) IGoadminRoleMenuDo
	Order(conds ...field.Expr) IGoadminRoleMenuDo
	Distinct(cols ...field.Expr) IGoadminRoleMenuDo
	Omit(cols ...field.Expr) IGoadminRoleMenuDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo
	Group(cols ...field.Expr) IGoadminRoleMenuDo
	Having(conds ...gen.Condition) IGoadminRoleMenuDo
	Limit(limit int) IGoadminRoleMenuDo
	Offset(offset int) IGoadminRoleMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRoleMenuDo
	Unscoped() IGoadminRoleMenuDo
	Create(values ...*model.GoadminRoleMenu) error
	CreateInBatches(values []*model.GoadminRoleMenu, batchSize int) error
	Save(values ...*model.GoadminRoleMenu) error
	First() (*model.GoadminRoleMenu, error)
	Take() (*model.GoadminRoleMenu, error)
	Last() (*model.GoadminRoleMenu, error)
	Find() ([]*model.GoadminRoleMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoleMenu, err error)
	FindInBatches(result *[]*model.GoadminRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminRoleMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminRoleMenuDo
	Assign(attrs ...field.AssignExpr) IGoadminRoleMenuDo
	Joins(fields ...field.RelationField) IGoadminRoleMenuDo
	Preload(fields ...field.RelationField) IGoadminRoleMenuDo
	FirstOrInit() (*model.GoadminRoleMenu, error)
	FirstOrCreate() (*model.GoadminRoleMenu, error)
	FindByPage(offset int, limit int) (result []*model.GoadminRoleMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminRoleMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetById(id int) (result *model.GoadminRoleMenu, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (g goadminRoleMenuDo) GetById(id int) (result *model.GoadminRoleMenu, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM goadmin_role_menu WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

func (g goadminRoleMenuDo) Debug() IGoadminRoleMenuDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRoleMenuDo) WithContext(ctx context.Context) IGoadminRoleMenuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRoleMenuDo) ReadDB() IGoadminRoleMenuDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminRoleMenuDo) WriteDB() IGoadminRoleMenuDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminRoleMenuDo) Clauses(conds ...clause.Expression) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRoleMenuDo) Returning(value interface{}, columns ...string) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminRoleMenuDo) Not(conds ...gen.Condition) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRoleMenuDo) Or(conds ...gen.Condition) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRoleMenuDo) Select(conds ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRoleMenuDo) Where(conds ...gen.Condition) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRoleMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminRoleMenuDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminRoleMenuDo) Order(conds ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRoleMenuDo) Distinct(cols ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRoleMenuDo) Omit(cols ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRoleMenuDo) Join(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRoleMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRoleMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRoleMenuDo) Group(cols ...field.Expr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRoleMenuDo) Having(conds ...gen.Condition) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRoleMenuDo) Limit(limit int) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRoleMenuDo) Offset(offset int) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRoleMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRoleMenuDo) Unscoped() IGoadminRoleMenuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRoleMenuDo) Create(values ...*model.GoadminRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRoleMenuDo) CreateInBatches(values []*model.GoadminRoleMenu, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRoleMenuDo) Save(values ...*model.GoadminRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRoleMenuDo) First() (*model.GoadminRoleMenu, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleMenu), nil
	}
}

func (g goadminRoleMenuDo) Take() (*model.GoadminRoleMenu, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleMenu), nil
	}
}

func (g goadminRoleMenuDo) Last() (*model.GoadminRoleMenu, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleMenu), nil
	}
}

func (g goadminRoleMenuDo) Find() ([]*model.GoadminRoleMenu, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminRoleMenu), err
}

func (g goadminRoleMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoleMenu, err error) {
	buf := make([]*model.GoadminRoleMenu, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRoleMenuDo) FindInBatches(result *[]*model.GoadminRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRoleMenuDo) Attrs(attrs ...field.AssignExpr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRoleMenuDo) Assign(attrs ...field.AssignExpr) IGoadminRoleMenuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRoleMenuDo) Joins(fields ...field.RelationField) IGoadminRoleMenuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminRoleMenuDo) Preload(fields ...field.RelationField) IGoadminRoleMenuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminRoleMenuDo) FirstOrInit() (*model.GoadminRoleMenu, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleMenu), nil
	}
}

func (g goadminRoleMenuDo) FirstOrCreate() (*model.GoadminRoleMenu, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleMenu), nil
	}
}

func (g goadminRoleMenuDo) FindByPage(offset int, limit int) (result []*model.GoadminRoleMenu, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminRoleMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminRoleMenuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminRoleMenuDo) Delete(models ...*model.GoadminRoleMenu) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminRoleMenuDo) withDO(do gen.Dao) *goadminRoleMenuDo {
	g.DO = *do.(*gen.DO)
	return g
}
