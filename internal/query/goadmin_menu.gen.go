// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminMenu(db *gorm.DB) goadminMenu {
	_goadminMenu := goadminMenu{}

	_goadminMenu.goadminMenuDo.UseDB(db)
	_goadminMenu.goadminMenuDo.UseModel(&model.GoadminMenu{})

	tableName := _goadminMenu.goadminMenuDo.TableName()
	_goadminMenu.ALL = field.NewAsterisk(tableName)
	_goadminMenu.ID = field.NewInt32(tableName, "id")
	_goadminMenu.ParentID = field.NewInt32(tableName, "parent_id")
	_goadminMenu.Type = field.NewInt32(tableName, "type")
	_goadminMenu.Order_ = field.NewInt32(tableName, "order")
	_goadminMenu.Title = field.NewString(tableName, "title")
	_goadminMenu.Icon = field.NewString(tableName, "icon")
	_goadminMenu.URI = field.NewString(tableName, "uri")
	_goadminMenu.Header = field.NewString(tableName, "header")
	_goadminMenu.PluginName = field.NewString(tableName, "plugin_name")
	_goadminMenu.UUID = field.NewString(tableName, "uuid")
	_goadminMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminMenu.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminMenu.fillFieldMap()

	return _goadminMenu
}

type goadminMenu struct {
	goadminMenuDo

	ALL        field.Asterisk
	ID         field.Int32
	ParentID   field.Int32
	Type       field.Int32
	Order_     field.Int32
	Title      field.String
	Icon       field.String
	URI        field.String
	Header     field.String
	PluginName field.String
	UUID       field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (g goadminMenu) Table(newTableName string) *goadminMenu {
	g.goadminMenuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminMenu) As(alias string) *goadminMenu {
	g.goadminMenuDo.DO = *(g.goadminMenuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminMenu) updateTableName(table string) *goadminMenu {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.ParentID = field.NewInt32(table, "parent_id")
	g.Type = field.NewInt32(table, "type")
	g.Order_ = field.NewInt32(table, "order")
	g.Title = field.NewString(table, "title")
	g.Icon = field.NewString(table, "icon")
	g.URI = field.NewString(table, "uri")
	g.Header = field.NewString(table, "header")
	g.PluginName = field.NewString(table, "plugin_name")
	g.UUID = field.NewString(table, "uuid")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminMenu) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 12)
	g.fieldMap["id"] = g.ID
	g.fieldMap["parent_id"] = g.ParentID
	g.fieldMap["type"] = g.Type
	g.fieldMap["order"] = g.Order_
	g.fieldMap["title"] = g.Title
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["uri"] = g.URI
	g.fieldMap["header"] = g.Header
	g.fieldMap["plugin_name"] = g.PluginName
	g.fieldMap["uuid"] = g.UUID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminMenu) clone(db *gorm.DB) goadminMenu {
	g.goadminMenuDo.ReplaceDB(db)
	return g
}

type goadminMenuDo struct{ gen.DO }

type IGoadminMenuDo interface {
	gen.SubQuery
	Debug() IGoadminMenuDo
	WithContext(ctx context.Context) IGoadminMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminMenuDo
	WriteDB() IGoadminMenuDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminMenuDo
	Not(conds ...gen.Condition) IGoadminMenuDo
	Or(conds ...gen.Condition) IGoadminMenuDo
	Select(conds ...field.Expr) IGoadminMenuDo
	Where(conds ...gen.Condition) IGoadminMenuDo
	Order(conds ...field.Expr) IGoadminMenuDo
	Distinct(cols ...field.Expr) IGoadminMenuDo
	Omit(cols ...field.Expr) IGoadminMenuDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminMenuDo
	Group(cols ...field.Expr) IGoadminMenuDo
	Having(conds ...gen.Condition) IGoadminMenuDo
	Limit(limit int) IGoadminMenuDo
	Offset(offset int) IGoadminMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminMenuDo
	Unscoped() IGoadminMenuDo
	Create(values ...*model.GoadminMenu) error
	CreateInBatches(values []*model.GoadminMenu, batchSize int) error
	Save(values ...*model.GoadminMenu) error
	First() (*model.GoadminMenu, error)
	Take() (*model.GoadminMenu, error)
	Last() (*model.GoadminMenu, error)
	Find() ([]*model.GoadminMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminMenu, err error)
	FindInBatches(result *[]*model.GoadminMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminMenuDo
	Assign(attrs ...field.AssignExpr) IGoadminMenuDo
	Joins(fields ...field.RelationField) IGoadminMenuDo
	Preload(fields ...field.RelationField) IGoadminMenuDo
	FirstOrInit() (*model.GoadminMenu, error)
	FirstOrCreate() (*model.GoadminMenu, error)
	FindByPage(offset int, limit int) (result []*model.GoadminMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminMenuDo) Debug() IGoadminMenuDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminMenuDo) WithContext(ctx context.Context) IGoadminMenuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminMenuDo) ReadDB() IGoadminMenuDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminMenuDo) WriteDB() IGoadminMenuDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminMenuDo) Clauses(conds ...clause.Expression) IGoadminMenuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminMenuDo) Returning(value interface{}, columns ...string) IGoadminMenuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminMenuDo) Not(conds ...gen.Condition) IGoadminMenuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminMenuDo) Or(conds ...gen.Condition) IGoadminMenuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminMenuDo) Select(conds ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminMenuDo) Where(conds ...gen.Condition) IGoadminMenuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminMenuDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminMenuDo) Order(conds ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminMenuDo) Distinct(cols ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminMenuDo) Omit(cols ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminMenuDo) Join(table schema.Tabler, on ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminMenuDo) Group(cols ...field.Expr) IGoadminMenuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminMenuDo) Having(conds ...gen.Condition) IGoadminMenuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminMenuDo) Limit(limit int) IGoadminMenuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminMenuDo) Offset(offset int) IGoadminMenuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminMenuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminMenuDo) Unscoped() IGoadminMenuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminMenuDo) Create(values ...*model.GoadminMenu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminMenuDo) CreateInBatches(values []*model.GoadminMenu, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminMenuDo) Save(values ...*model.GoadminMenu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminMenuDo) First() (*model.GoadminMenu, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminMenu), nil
	}
}

func (g goadminMenuDo) Take() (*model.GoadminMenu, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminMenu), nil
	}
}

func (g goadminMenuDo) Last() (*model.GoadminMenu, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminMenu), nil
	}
}

func (g goadminMenuDo) Find() ([]*model.GoadminMenu, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminMenu), err
}

func (g goadminMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminMenu, err error) {
	buf := make([]*model.GoadminMenu, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminMenuDo) FindInBatches(result *[]*model.GoadminMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminMenuDo) Attrs(attrs ...field.AssignExpr) IGoadminMenuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminMenuDo) Assign(attrs ...field.AssignExpr) IGoadminMenuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminMenuDo) Joins(fields ...field.RelationField) IGoadminMenuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminMenuDo) Preload(fields ...field.RelationField) IGoadminMenuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminMenuDo) FirstOrInit() (*model.GoadminMenu, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminMenu), nil
	}
}

func (g goadminMenuDo) FirstOrCreate() (*model.GoadminMenu, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminMenu), nil
	}
}

func (g goadminMenuDo) FindByPage(offset int, limit int) (result []*model.GoadminMenu, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminMenuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminMenuDo) Delete(models ...*model.GoadminMenu) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminMenuDo) withDO(do gen.Dao) *goadminMenuDo {
	g.DO = *do.(*gen.DO)
	return g
}
