// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminRoleUser(db *gorm.DB) goadminRoleUser {
	_goadminRoleUser := goadminRoleUser{}

	_goadminRoleUser.goadminRoleUserDo.UseDB(db)
	_goadminRoleUser.goadminRoleUserDo.UseModel(&model.GoadminRoleUser{})

	tableName := _goadminRoleUser.goadminRoleUserDo.TableName()
	_goadminRoleUser.ALL = field.NewAsterisk(tableName)
	_goadminRoleUser.RoleID = field.NewInt32(tableName, "role_id")
	_goadminRoleUser.UserID = field.NewInt32(tableName, "user_id")
	_goadminRoleUser.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRoleUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRoleUser.fillFieldMap()

	return _goadminRoleUser
}

type goadminRoleUser struct {
	goadminRoleUserDo goadminRoleUserDo

	ALL       field.Asterisk
	RoleID    field.Int32
	UserID    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRoleUser) Table(newTableName string) *goadminRoleUser {
	g.goadminRoleUserDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminRoleUser) As(alias string) *goadminRoleUser {
	g.goadminRoleUserDo.DO = *(g.goadminRoleUserDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminRoleUser) updateTableName(table string) *goadminRoleUser {
	g.ALL = field.NewAsterisk(table)
	g.RoleID = field.NewInt32(table, "role_id")
	g.UserID = field.NewInt32(table, "user_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminRoleUser) WithContext(ctx context.Context) IGoadminRoleUserDo {
	return g.goadminRoleUserDo.WithContext(ctx)
}

func (g goadminRoleUser) TableName() string { return g.goadminRoleUserDo.TableName() }

func (g goadminRoleUser) Alias() string { return g.goadminRoleUserDo.Alias() }

func (g *goadminRoleUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminRoleUser) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["role_id"] = g.RoleID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRoleUser) clone(db *gorm.DB) goadminRoleUser {
	g.goadminRoleUserDo.ReplaceDB(db)
	return g
}

type goadminRoleUserDo struct{ gen.DO }

type IGoadminRoleUserDo interface {
	gen.SubQuery
	Debug() IGoadminRoleUserDo
	WithContext(ctx context.Context) IGoadminRoleUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminRoleUserDo
	WriteDB() IGoadminRoleUserDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminRoleUserDo
	Not(conds ...gen.Condition) IGoadminRoleUserDo
	Or(conds ...gen.Condition) IGoadminRoleUserDo
	Select(conds ...field.Expr) IGoadminRoleUserDo
	Where(conds ...gen.Condition) IGoadminRoleUserDo
	Order(conds ...field.Expr) IGoadminRoleUserDo
	Distinct(cols ...field.Expr) IGoadminRoleUserDo
	Omit(cols ...field.Expr) IGoadminRoleUserDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo
	Group(cols ...field.Expr) IGoadminRoleUserDo
	Having(conds ...gen.Condition) IGoadminRoleUserDo
	Limit(limit int) IGoadminRoleUserDo
	Offset(offset int) IGoadminRoleUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRoleUserDo
	Unscoped() IGoadminRoleUserDo
	Create(values ...*model.GoadminRoleUser) error
	CreateInBatches(values []*model.GoadminRoleUser, batchSize int) error
	Save(values ...*model.GoadminRoleUser) error
	First() (*model.GoadminRoleUser, error)
	Take() (*model.GoadminRoleUser, error)
	Last() (*model.GoadminRoleUser, error)
	Find() ([]*model.GoadminRoleUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoleUser, err error)
	FindInBatches(result *[]*model.GoadminRoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminRoleUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminRoleUserDo
	Assign(attrs ...field.AssignExpr) IGoadminRoleUserDo
	Joins(fields ...field.RelationField) IGoadminRoleUserDo
	Preload(fields ...field.RelationField) IGoadminRoleUserDo
	FirstOrInit() (*model.GoadminRoleUser, error)
	FirstOrCreate() (*model.GoadminRoleUser, error)
	FindByPage(offset int, limit int) (result []*model.GoadminRoleUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminRoleUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetById(id int) (result *model.GoadminRoleUser, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (g goadminRoleUserDo) GetById(id int) (result *model.GoadminRoleUser, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM goadmin_role_users WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = g.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

func (g goadminRoleUserDo) Debug() IGoadminRoleUserDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRoleUserDo) WithContext(ctx context.Context) IGoadminRoleUserDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRoleUserDo) ReadDB() IGoadminRoleUserDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminRoleUserDo) WriteDB() IGoadminRoleUserDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminRoleUserDo) Clauses(conds ...clause.Expression) IGoadminRoleUserDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRoleUserDo) Returning(value interface{}, columns ...string) IGoadminRoleUserDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminRoleUserDo) Not(conds ...gen.Condition) IGoadminRoleUserDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRoleUserDo) Or(conds ...gen.Condition) IGoadminRoleUserDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRoleUserDo) Select(conds ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRoleUserDo) Where(conds ...gen.Condition) IGoadminRoleUserDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRoleUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminRoleUserDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminRoleUserDo) Order(conds ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRoleUserDo) Distinct(cols ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRoleUserDo) Omit(cols ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRoleUserDo) Join(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRoleUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRoleUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRoleUserDo) Group(cols ...field.Expr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRoleUserDo) Having(conds ...gen.Condition) IGoadminRoleUserDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRoleUserDo) Limit(limit int) IGoadminRoleUserDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRoleUserDo) Offset(offset int) IGoadminRoleUserDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRoleUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminRoleUserDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRoleUserDo) Unscoped() IGoadminRoleUserDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRoleUserDo) Create(values ...*model.GoadminRoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRoleUserDo) CreateInBatches(values []*model.GoadminRoleUser, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRoleUserDo) Save(values ...*model.GoadminRoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRoleUserDo) First() (*model.GoadminRoleUser, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleUser), nil
	}
}

func (g goadminRoleUserDo) Take() (*model.GoadminRoleUser, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleUser), nil
	}
}

func (g goadminRoleUserDo) Last() (*model.GoadminRoleUser, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleUser), nil
	}
}

func (g goadminRoleUserDo) Find() ([]*model.GoadminRoleUser, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminRoleUser), err
}

func (g goadminRoleUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminRoleUser, err error) {
	buf := make([]*model.GoadminRoleUser, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRoleUserDo) FindInBatches(result *[]*model.GoadminRoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRoleUserDo) Attrs(attrs ...field.AssignExpr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRoleUserDo) Assign(attrs ...field.AssignExpr) IGoadminRoleUserDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRoleUserDo) Joins(fields ...field.RelationField) IGoadminRoleUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminRoleUserDo) Preload(fields ...field.RelationField) IGoadminRoleUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminRoleUserDo) FirstOrInit() (*model.GoadminRoleUser, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleUser), nil
	}
}

func (g goadminRoleUserDo) FirstOrCreate() (*model.GoadminRoleUser, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminRoleUser), nil
	}
}

func (g goadminRoleUserDo) FindByPage(offset int, limit int) (result []*model.GoadminRoleUser, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminRoleUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminRoleUserDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminRoleUserDo) Delete(models ...*model.GoadminRoleUser) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminRoleUserDo) withDO(do gen.Dao) *goadminRoleUserDo {
	g.DO = *do.(*gen.DO)
	return g
}
