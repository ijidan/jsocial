// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newFeedImage(db *gorm.DB) feedImage {
	_feedImage := feedImage{}

	_feedImage.feedImageDo.UseDB(db)
	_feedImage.feedImageDo.UseModel(&model.FeedImage{})

	tableName := _feedImage.feedImageDo.TableName()
	_feedImage.ALL = field.NewAsterisk(tableName)
	_feedImage.ID = field.NewInt64(tableName, "id")
	_feedImage.FeedID = field.NewInt64(tableName, "feed_id")
	_feedImage.ImgURL = field.NewString(tableName, "img_url")
	_feedImage.CreatedAt = field.NewTime(tableName, "created_at")
	_feedImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_feedImage.DeletedAt = field.NewField(tableName, "deleted_at")

	_feedImage.fillFieldMap()

	return _feedImage
}

type feedImage struct {
	feedImageDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	FeedID    field.Int64  // 动态ID
	ImgURL    field.String // 图片URL
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (f feedImage) Table(newTableName string) *feedImage {
	f.feedImageDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feedImage) As(alias string) *feedImage {
	f.feedImageDo.DO = *(f.feedImageDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *feedImage) updateTableName(table string) *feedImage {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FeedID = field.NewInt64(table, "feed_id")
	f.ImgURL = field.NewString(table, "img_url")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *feedImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feedImage) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["feed_id"] = f.FeedID
	f.fieldMap["img_url"] = f.ImgURL
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f feedImage) clone(db *gorm.DB) feedImage {
	f.feedImageDo.ReplaceDB(db)
	return f
}

type feedImageDo struct{ gen.DO }

type IFeedImageDo interface {
	gen.SubQuery
	Debug() IFeedImageDo
	WithContext(ctx context.Context) IFeedImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFeedImageDo
	WriteDB() IFeedImageDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFeedImageDo
	Not(conds ...gen.Condition) IFeedImageDo
	Or(conds ...gen.Condition) IFeedImageDo
	Select(conds ...field.Expr) IFeedImageDo
	Where(conds ...gen.Condition) IFeedImageDo
	Order(conds ...field.Expr) IFeedImageDo
	Distinct(cols ...field.Expr) IFeedImageDo
	Omit(cols ...field.Expr) IFeedImageDo
	Join(table schema.Tabler, on ...field.Expr) IFeedImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFeedImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFeedImageDo
	Group(cols ...field.Expr) IFeedImageDo
	Having(conds ...gen.Condition) IFeedImageDo
	Limit(limit int) IFeedImageDo
	Offset(offset int) IFeedImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFeedImageDo
	Unscoped() IFeedImageDo
	Create(values ...*model.FeedImage) error
	CreateInBatches(values []*model.FeedImage, batchSize int) error
	Save(values ...*model.FeedImage) error
	First() (*model.FeedImage, error)
	Take() (*model.FeedImage, error)
	Last() (*model.FeedImage, error)
	Find() ([]*model.FeedImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FeedImage, err error)
	FindInBatches(result *[]*model.FeedImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FeedImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFeedImageDo
	Assign(attrs ...field.AssignExpr) IFeedImageDo
	Joins(fields ...field.RelationField) IFeedImageDo
	Preload(fields ...field.RelationField) IFeedImageDo
	FirstOrInit() (*model.FeedImage, error)
	FirstOrCreate() (*model.FeedImage, error)
	FindByPage(offset int, limit int) (result []*model.FeedImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFeedImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f feedImageDo) Debug() IFeedImageDo {
	return f.withDO(f.DO.Debug())
}

func (f feedImageDo) WithContext(ctx context.Context) IFeedImageDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedImageDo) ReadDB() IFeedImageDo {
	return f.Clauses(dbresolver.Read)
}

func (f feedImageDo) WriteDB() IFeedImageDo {
	return f.Clauses(dbresolver.Write)
}

func (f feedImageDo) Clauses(conds ...clause.Expression) IFeedImageDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedImageDo) Returning(value interface{}, columns ...string) IFeedImageDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feedImageDo) Not(conds ...gen.Condition) IFeedImageDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedImageDo) Or(conds ...gen.Condition) IFeedImageDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedImageDo) Select(conds ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedImageDo) Where(conds ...gen.Condition) IFeedImageDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedImageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFeedImageDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f feedImageDo) Order(conds ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedImageDo) Distinct(cols ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedImageDo) Omit(cols ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedImageDo) Join(table schema.Tabler, on ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedImageDo) Group(cols ...field.Expr) IFeedImageDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedImageDo) Having(conds ...gen.Condition) IFeedImageDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedImageDo) Limit(limit int) IFeedImageDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedImageDo) Offset(offset int) IFeedImageDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFeedImageDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedImageDo) Unscoped() IFeedImageDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedImageDo) Create(values ...*model.FeedImage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedImageDo) CreateInBatches(values []*model.FeedImage, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedImageDo) Save(values ...*model.FeedImage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedImageDo) First() (*model.FeedImage, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedImage), nil
	}
}

func (f feedImageDo) Take() (*model.FeedImage, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedImage), nil
	}
}

func (f feedImageDo) Last() (*model.FeedImage, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedImage), nil
	}
}

func (f feedImageDo) Find() ([]*model.FeedImage, error) {
	result, err := f.DO.Find()
	return result.([]*model.FeedImage), err
}

func (f feedImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FeedImage, err error) {
	buf := make([]*model.FeedImage, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedImageDo) FindInBatches(result *[]*model.FeedImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedImageDo) Attrs(attrs ...field.AssignExpr) IFeedImageDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedImageDo) Assign(attrs ...field.AssignExpr) IFeedImageDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedImageDo) Joins(fields ...field.RelationField) IFeedImageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feedImageDo) Preload(fields ...field.RelationField) IFeedImageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feedImageDo) FirstOrInit() (*model.FeedImage, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedImage), nil
	}
}

func (f feedImageDo) FirstOrCreate() (*model.FeedImage, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FeedImage), nil
	}
}

func (f feedImageDo) FindByPage(offset int, limit int) (result []*model.FeedImage, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feedImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feedImageDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feedImageDo) Delete(models ...*model.FeedImage) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feedImageDo) withDO(do gen.Dao) *feedImageDo {
	f.DO = *do.(*gen.DO)
	return f
}
