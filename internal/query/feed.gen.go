// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newFeed(db *gorm.DB) feed {
	_feed := feed{}

	_feed.feedDo.UseDB(db)
	_feed.feedDo.UseModel(&model.Feed{})

	tableName := _feed.feedDo.TableName()
	_feed.ALL = field.NewAsterisk(tableName)
	_feed.ID = field.NewInt64(tableName, "id")
	_feed.UserID = field.NewInt64(tableName, "user_id")
	_feed.Content = field.NewString(tableName, "content")
	_feed.Type = field.NewInt32(tableName, "type")
	_feed.LikeCount = field.NewInt32(tableName, "like_count")
	_feed.ViewCount = field.NewInt32(tableName, "view_count")
	_feed.CommentCount = field.NewInt32(tableName, "comment_count")
	_feed.Operator = field.NewInt64(tableName, "operator")
	_feed.Remark = field.NewString(tableName, "remark")
	_feed.Hot = field.NewInt64(tableName, "hot")
	_feed.IsEnable = field.NewInt32(tableName, "is_enable")
	_feed.ReviewStatus = field.NewInt32(tableName, "review_status")
	_feed.CreatedAt = field.NewTime(tableName, "created_at")
	_feed.UpdatedAt = field.NewTime(tableName, "updated_at")
	_feed.DeletedAt = field.NewField(tableName, "deleted_at")

	_feed.fillFieldMap()

	return _feed
}

type feed struct {
	feedDo feedDo

	ALL          field.Asterisk
	ID           field.Int64  // 动态 ID
	UserID       field.Int64  // 用户ID
	Content      field.String // 动态内容
	Type         field.Int32  // 动态类型
	LikeCount    field.Int32  // 动态点赞数
	ViewCount    field.Int32  // 动态阅读数
	CommentCount field.Int32  // 动态评论数
	Operator     field.Int64  // 审核人
	Remark       field.String // 备注
	Hot          field.Int64  // 热门排序值
	IsEnable     field.Int32  // 是否启用
	ReviewStatus field.Int32  // 审核状态 0-未审核 1-已审核 2-未通过
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (f feed) Table(newTableName string) *feed {
	f.feedDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feed) As(alias string) *feed {
	f.feedDo.DO = *(f.feedDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *feed) updateTableName(table string) *feed {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.Content = field.NewString(table, "content")
	f.Type = field.NewInt32(table, "type")
	f.LikeCount = field.NewInt32(table, "like_count")
	f.ViewCount = field.NewInt32(table, "view_count")
	f.CommentCount = field.NewInt32(table, "comment_count")
	f.Operator = field.NewInt64(table, "operator")
	f.Remark = field.NewString(table, "remark")
	f.Hot = field.NewInt64(table, "hot")
	f.IsEnable = field.NewInt32(table, "is_enable")
	f.ReviewStatus = field.NewInt32(table, "review_status")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *feed) WithContext(ctx context.Context) *feedDo { return f.feedDo.WithContext(ctx) }

func (f feed) TableName() string { return f.feedDo.TableName() }

func (f feed) Alias() string { return f.feedDo.Alias() }

func (f *feed) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feed) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["content"] = f.Content
	f.fieldMap["type"] = f.Type
	f.fieldMap["like_count"] = f.LikeCount
	f.fieldMap["view_count"] = f.ViewCount
	f.fieldMap["comment_count"] = f.CommentCount
	f.fieldMap["operator"] = f.Operator
	f.fieldMap["remark"] = f.Remark
	f.fieldMap["hot"] = f.Hot
	f.fieldMap["is_enable"] = f.IsEnable
	f.fieldMap["review_status"] = f.ReviewStatus
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f feed) clone(db *gorm.DB) feed {
	f.feedDo.ReplaceDB(db)
	return f
}

type feedDo struct{ gen.DO }

func (f feedDo) Debug() *feedDo {
	return f.withDO(f.DO.Debug())
}

func (f feedDo) WithContext(ctx context.Context) *feedDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedDo) ReadDB() *feedDo {
	return f.Clauses(dbresolver.Read)
}

func (f feedDo) WriteDB() *feedDo {
	return f.Clauses(dbresolver.Write)
}

func (f feedDo) Clauses(conds ...clause.Expression) *feedDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedDo) Returning(value interface{}, columns ...string) *feedDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feedDo) Not(conds ...gen.Condition) *feedDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedDo) Or(conds ...gen.Condition) *feedDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedDo) Select(conds ...field.Expr) *feedDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedDo) Where(conds ...gen.Condition) *feedDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *feedDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f feedDo) Order(conds ...field.Expr) *feedDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedDo) Distinct(cols ...field.Expr) *feedDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedDo) Omit(cols ...field.Expr) *feedDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedDo) Join(table schema.Tabler, on ...field.Expr) *feedDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedDo) LeftJoin(table schema.Tabler, on ...field.Expr) *feedDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedDo) RightJoin(table schema.Tabler, on ...field.Expr) *feedDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedDo) Group(cols ...field.Expr) *feedDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedDo) Having(conds ...gen.Condition) *feedDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedDo) Limit(limit int) *feedDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedDo) Offset(offset int) *feedDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *feedDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedDo) Unscoped() *feedDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedDo) Create(values ...*model.Feed) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedDo) CreateInBatches(values []*model.Feed, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedDo) Save(values ...*model.Feed) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedDo) First() (*model.Feed, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Feed), nil
	}
}

func (f feedDo) Take() (*model.Feed, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Feed), nil
	}
}

func (f feedDo) Last() (*model.Feed, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Feed), nil
	}
}

func (f feedDo) Find() ([]*model.Feed, error) {
	result, err := f.DO.Find()
	return result.([]*model.Feed), err
}

func (f feedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Feed, err error) {
	buf := make([]*model.Feed, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedDo) FindInBatches(result *[]*model.Feed, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedDo) Attrs(attrs ...field.AssignExpr) *feedDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedDo) Assign(attrs ...field.AssignExpr) *feedDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedDo) Joins(fields ...field.RelationField) *feedDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feedDo) Preload(fields ...field.RelationField) *feedDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feedDo) FirstOrInit() (*model.Feed, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Feed), nil
	}
}

func (f feedDo) FirstOrCreate() (*model.Feed, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Feed), nil
	}
}

func (f feedDo) FindByPage(offset int, limit int) (result []*model.Feed, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feedDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feedDo) Delete(models ...*model.Feed) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feedDo) withDO(do gen.Dao) *feedDo {
	f.DO = *do.(*gen.DO)
	return f
}
