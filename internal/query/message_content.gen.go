// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newMessageContent(db *gorm.DB) messageContent {
	_messageContent := messageContent{}

	_messageContent.messageContentDo.UseDB(db)
	_messageContent.messageContentDo.UseModel(&model.MessageContent{})

	tableName := _messageContent.messageContentDo.TableName()
	_messageContent.ALL = field.NewAsterisk(tableName)
	_messageContent.ID = field.NewInt64(tableName, "id")
	_messageContent.Type = field.NewInt32(tableName, "type")
	_messageContent.Body = field.NewString(tableName, "body")
	_messageContent.Extra = field.NewString(tableName, "extra")
	_messageContent.CreatedAt = field.NewTime(tableName, "created_at")
	_messageContent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageContent.DeletedAt = field.NewField(tableName, "deleted_at")

	_messageContent.fillFieldMap()

	return _messageContent
}

type messageContent struct {
	messageContentDo messageContentDo

	ALL       field.Asterisk
	ID        field.Int64
	Type      field.Int32  // 消息类型
	Body      field.String // 内容
	Extra     field.String // 扩展
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m messageContent) Table(newTableName string) *messageContent {
	m.messageContentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageContent) As(alias string) *messageContent {
	m.messageContentDo.DO = *(m.messageContentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageContent) updateTableName(table string) *messageContent {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Type = field.NewInt32(table, "type")
	m.Body = field.NewString(table, "body")
	m.Extra = field.NewString(table, "extra")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *messageContent) WithContext(ctx context.Context) IMessageContentDo {
	return m.messageContentDo.WithContext(ctx)
}

func (m messageContent) TableName() string { return m.messageContentDo.TableName() }

func (m messageContent) Alias() string { return m.messageContentDo.Alias() }

func (m *messageContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageContent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["type"] = m.Type
	m.fieldMap["body"] = m.Body
	m.fieldMap["extra"] = m.Extra
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m messageContent) clone(db *gorm.DB) messageContent {
	m.messageContentDo.ReplaceDB(db)
	return m
}

type messageContentDo struct{ gen.DO }

type IMessageContentDo interface {
	gen.SubQuery
	Debug() IMessageContentDo
	WithContext(ctx context.Context) IMessageContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageContentDo
	WriteDB() IMessageContentDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageContentDo
	Not(conds ...gen.Condition) IMessageContentDo
	Or(conds ...gen.Condition) IMessageContentDo
	Select(conds ...field.Expr) IMessageContentDo
	Where(conds ...gen.Condition) IMessageContentDo
	Order(conds ...field.Expr) IMessageContentDo
	Distinct(cols ...field.Expr) IMessageContentDo
	Omit(cols ...field.Expr) IMessageContentDo
	Join(table schema.Tabler, on ...field.Expr) IMessageContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageContentDo
	Group(cols ...field.Expr) IMessageContentDo
	Having(conds ...gen.Condition) IMessageContentDo
	Limit(limit int) IMessageContentDo
	Offset(offset int) IMessageContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageContentDo
	Unscoped() IMessageContentDo
	Create(values ...*model.MessageContent) error
	CreateInBatches(values []*model.MessageContent, batchSize int) error
	Save(values ...*model.MessageContent) error
	First() (*model.MessageContent, error)
	Take() (*model.MessageContent, error)
	Last() (*model.MessageContent, error)
	Find() ([]*model.MessageContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageContent, err error)
	FindInBatches(result *[]*model.MessageContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageContentDo
	Assign(attrs ...field.AssignExpr) IMessageContentDo
	Joins(fields ...field.RelationField) IMessageContentDo
	Preload(fields ...field.RelationField) IMessageContentDo
	FirstOrInit() (*model.MessageContent, error)
	FirstOrCreate() (*model.MessageContent, error)
	FindByPage(offset int, limit int) (result []*model.MessageContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetById(id int) (result *model.MessageContent, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (m messageContentDo) GetById(id int) (result *model.MessageContent, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM message_content WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

func (m messageContentDo) Debug() IMessageContentDo {
	return m.withDO(m.DO.Debug())
}

func (m messageContentDo) WithContext(ctx context.Context) IMessageContentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageContentDo) ReadDB() IMessageContentDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageContentDo) WriteDB() IMessageContentDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageContentDo) Clauses(conds ...clause.Expression) IMessageContentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageContentDo) Returning(value interface{}, columns ...string) IMessageContentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageContentDo) Not(conds ...gen.Condition) IMessageContentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageContentDo) Or(conds ...gen.Condition) IMessageContentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageContentDo) Select(conds ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageContentDo) Where(conds ...gen.Condition) IMessageContentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageContentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMessageContentDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageContentDo) Order(conds ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageContentDo) Distinct(cols ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageContentDo) Omit(cols ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageContentDo) Join(table schema.Tabler, on ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageContentDo) Group(cols ...field.Expr) IMessageContentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageContentDo) Having(conds ...gen.Condition) IMessageContentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageContentDo) Limit(limit int) IMessageContentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageContentDo) Offset(offset int) IMessageContentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageContentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageContentDo) Unscoped() IMessageContentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageContentDo) Create(values ...*model.MessageContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageContentDo) CreateInBatches(values []*model.MessageContent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageContentDo) Save(values ...*model.MessageContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageContentDo) First() (*model.MessageContent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Take() (*model.MessageContent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Last() (*model.MessageContent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Find() ([]*model.MessageContent, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageContent), err
}

func (m messageContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageContent, err error) {
	buf := make([]*model.MessageContent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageContentDo) FindInBatches(result *[]*model.MessageContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageContentDo) Attrs(attrs ...field.AssignExpr) IMessageContentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageContentDo) Assign(attrs ...field.AssignExpr) IMessageContentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageContentDo) Joins(fields ...field.RelationField) IMessageContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageContentDo) Preload(fields ...field.RelationField) IMessageContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageContentDo) FirstOrInit() (*model.MessageContent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) FirstOrCreate() (*model.MessageContent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) FindByPage(offset int, limit int) (result []*model.MessageContent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageContentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageContentDo) Delete(models ...*model.MessageContent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageContentDo) withDO(do gen.Dao) *messageContentDo {
	m.DO = *do.(*gen.DO)
	return m
}
