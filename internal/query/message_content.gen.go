// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newMessageContent(db *gorm.DB) messageContent {
	_messageContent := messageContent{}

	_messageContent.messageContentDo.UseDB(db)
	_messageContent.messageContentDo.UseModel(&model.MessageContent{})

	tableName := _messageContent.messageContentDo.TableName()
	_messageContent.ALL = field.NewAsterisk(tableName)
	_messageContent.ID = field.NewInt64(tableName, "id")
	_messageContent.Type = field.NewInt32(tableName, "type")
	_messageContent.Body = field.NewString(tableName, "body")
	_messageContent.Extra = field.NewString(tableName, "extra")
	_messageContent.CreatedAt = field.NewTime(tableName, "created_at")
	_messageContent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageContent.DeletedAt = field.NewField(tableName, "deleted_at")

	_messageContent.fillFieldMap()

	return _messageContent
}

type messageContent struct {
	messageContentDo messageContentDo

	ALL       field.Asterisk
	ID        field.Int64
	Type      field.Int32  // 消息类型
	Body      field.String // 内容
	Extra     field.String // 扩展
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m messageContent) Table(newTableName string) *messageContent {
	m.messageContentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageContent) As(alias string) *messageContent {
	m.messageContentDo.DO = *(m.messageContentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageContent) updateTableName(table string) *messageContent {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Type = field.NewInt32(table, "type")
	m.Body = field.NewString(table, "body")
	m.Extra = field.NewString(table, "extra")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *messageContent) WithContext(ctx context.Context) *messageContentDo {
	return m.messageContentDo.WithContext(ctx)
}

func (m messageContent) TableName() string { return m.messageContentDo.TableName() }

func (m messageContent) Alias() string { return m.messageContentDo.Alias() }

func (m *messageContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageContent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["type"] = m.Type
	m.fieldMap["body"] = m.Body
	m.fieldMap["extra"] = m.Extra
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m messageContent) clone(db *gorm.DB) messageContent {
	m.messageContentDo.ReplaceDB(db)
	return m
}

type messageContentDo struct{ gen.DO }

func (m messageContentDo) Debug() *messageContentDo {
	return m.withDO(m.DO.Debug())
}

func (m messageContentDo) WithContext(ctx context.Context) *messageContentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageContentDo) ReadDB() *messageContentDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageContentDo) WriteDB() *messageContentDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageContentDo) Clauses(conds ...clause.Expression) *messageContentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageContentDo) Returning(value interface{}, columns ...string) *messageContentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageContentDo) Not(conds ...gen.Condition) *messageContentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageContentDo) Or(conds ...gen.Condition) *messageContentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageContentDo) Select(conds ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageContentDo) Where(conds ...gen.Condition) *messageContentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageContentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *messageContentDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageContentDo) Order(conds ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageContentDo) Distinct(cols ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageContentDo) Omit(cols ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageContentDo) Join(table schema.Tabler, on ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageContentDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageContentDo) Group(cols ...field.Expr) *messageContentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageContentDo) Having(conds ...gen.Condition) *messageContentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageContentDo) Limit(limit int) *messageContentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageContentDo) Offset(offset int) *messageContentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageContentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageContentDo) Unscoped() *messageContentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageContentDo) Create(values ...*model.MessageContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageContentDo) CreateInBatches(values []*model.MessageContent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageContentDo) Save(values ...*model.MessageContent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageContentDo) First() (*model.MessageContent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Take() (*model.MessageContent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Last() (*model.MessageContent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) Find() ([]*model.MessageContent, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageContent), err
}

func (m messageContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageContent, err error) {
	buf := make([]*model.MessageContent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageContentDo) FindInBatches(result *[]*model.MessageContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageContentDo) Attrs(attrs ...field.AssignExpr) *messageContentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageContentDo) Assign(attrs ...field.AssignExpr) *messageContentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageContentDo) Joins(fields ...field.RelationField) *messageContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageContentDo) Preload(fields ...field.RelationField) *messageContentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageContentDo) FirstOrInit() (*model.MessageContent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) FirstOrCreate() (*model.MessageContent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageContent), nil
	}
}

func (m messageContentDo) FindByPage(offset int, limit int) (result []*model.MessageContent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageContentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageContentDo) Delete(models ...*model.MessageContent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageContentDo) withDO(do gen.Dao) *messageContentDo {
	m.DO = *do.(*gen.DO)
	return m
}
