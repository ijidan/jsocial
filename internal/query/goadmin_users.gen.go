// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ijidan/jsocial/internal/model"
)

func newGoadminUsers(db *gorm.DB) goadminUsers {
	_goadminUsers := goadminUsers{}

	_goadminUsers.goadminUsersDo.UseDB(db)
	_goadminUsers.goadminUsersDo.UseModel(&model.GoadminUsers{})

	tableName := _goadminUsers.goadminUsersDo.TableName()
	_goadminUsers.ALL = field.NewAsterisk(tableName)
	_goadminUsers.ID = field.NewInt32(tableName, "id")
	_goadminUsers.Username = field.NewString(tableName, "username")
	_goadminUsers.Password = field.NewString(tableName, "password")
	_goadminUsers.Name = field.NewString(tableName, "name")
	_goadminUsers.Avatar = field.NewString(tableName, "avatar")
	_goadminUsers.RememberToken = field.NewString(tableName, "remember_token")
	_goadminUsers.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminUsers.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminUsers.fillFieldMap()

	return _goadminUsers
}

type goadminUsers struct {
	goadminUsersDo

	ALL           field.Asterisk
	ID            field.Int32
	Username      field.String
	Password      field.String
	Name          field.String
	Avatar        field.String
	RememberToken field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (g goadminUsers) Table(newTableName string) *goadminUsers {
	g.goadminUsersDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goadminUsers) As(alias string) *goadminUsers {
	g.goadminUsersDo.DO = *(g.goadminUsersDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goadminUsers) updateTableName(table string) *goadminUsers {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Username = field.NewString(table, "username")
	g.Password = field.NewString(table, "password")
	g.Name = field.NewString(table, "name")
	g.Avatar = field.NewString(table, "avatar")
	g.RememberToken = field.NewString(table, "remember_token")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *goadminUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goadminUsers) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["username"] = g.Username
	g.fieldMap["password"] = g.Password
	g.fieldMap["name"] = g.Name
	g.fieldMap["avatar"] = g.Avatar
	g.fieldMap["remember_token"] = g.RememberToken
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminUsers) clone(db *gorm.DB) goadminUsers {
	g.goadminUsersDo.ReplaceDB(db)
	return g
}

type goadminUsersDo struct{ gen.DO }

type IGoadminUsersDo interface {
	gen.SubQuery
	Debug() IGoadminUsersDo
	WithContext(ctx context.Context) IGoadminUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoadminUsersDo
	WriteDB() IGoadminUsersDo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoadminUsersDo
	Not(conds ...gen.Condition) IGoadminUsersDo
	Or(conds ...gen.Condition) IGoadminUsersDo
	Select(conds ...field.Expr) IGoadminUsersDo
	Where(conds ...gen.Condition) IGoadminUsersDo
	Order(conds ...field.Expr) IGoadminUsersDo
	Distinct(cols ...field.Expr) IGoadminUsersDo
	Omit(cols ...field.Expr) IGoadminUsersDo
	Join(table schema.Tabler, on ...field.Expr) IGoadminUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoadminUsersDo
	Group(cols ...field.Expr) IGoadminUsersDo
	Having(conds ...gen.Condition) IGoadminUsersDo
	Limit(limit int) IGoadminUsersDo
	Offset(offset int) IGoadminUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminUsersDo
	Unscoped() IGoadminUsersDo
	Create(values ...*model.GoadminUsers) error
	CreateInBatches(values []*model.GoadminUsers, batchSize int) error
	Save(values ...*model.GoadminUsers) error
	First() (*model.GoadminUsers, error)
	Take() (*model.GoadminUsers, error)
	Last() (*model.GoadminUsers, error)
	Find() ([]*model.GoadminUsers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminUsers, err error)
	FindInBatches(result *[]*model.GoadminUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoadminUsers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoadminUsersDo
	Assign(attrs ...field.AssignExpr) IGoadminUsersDo
	Joins(fields ...field.RelationField) IGoadminUsersDo
	Preload(fields ...field.RelationField) IGoadminUsersDo
	FirstOrInit() (*model.GoadminUsers, error)
	FirstOrCreate() (*model.GoadminUsers, error)
	FindByPage(offset int, limit int) (result []*model.GoadminUsers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoadminUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goadminUsersDo) Debug() IGoadminUsersDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminUsersDo) WithContext(ctx context.Context) IGoadminUsersDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminUsersDo) ReadDB() IGoadminUsersDo {
	return g.Clauses(dbresolver.Read)
}

func (g goadminUsersDo) WriteDB() IGoadminUsersDo {
	return g.Clauses(dbresolver.Write)
}

func (g goadminUsersDo) Clauses(conds ...clause.Expression) IGoadminUsersDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminUsersDo) Returning(value interface{}, columns ...string) IGoadminUsersDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goadminUsersDo) Not(conds ...gen.Condition) IGoadminUsersDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminUsersDo) Or(conds ...gen.Condition) IGoadminUsersDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminUsersDo) Select(conds ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminUsersDo) Where(conds ...gen.Condition) IGoadminUsersDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminUsersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoadminUsersDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goadminUsersDo) Order(conds ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminUsersDo) Distinct(cols ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminUsersDo) Omit(cols ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminUsersDo) Join(table schema.Tabler, on ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminUsersDo) Group(cols ...field.Expr) IGoadminUsersDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminUsersDo) Having(conds ...gen.Condition) IGoadminUsersDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminUsersDo) Limit(limit int) IGoadminUsersDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminUsersDo) Offset(offset int) IGoadminUsersDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoadminUsersDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminUsersDo) Unscoped() IGoadminUsersDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminUsersDo) Create(values ...*model.GoadminUsers) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminUsersDo) CreateInBatches(values []*model.GoadminUsers, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminUsersDo) Save(values ...*model.GoadminUsers) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminUsersDo) First() (*model.GoadminUsers, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUsers), nil
	}
}

func (g goadminUsersDo) Take() (*model.GoadminUsers, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUsers), nil
	}
}

func (g goadminUsersDo) Last() (*model.GoadminUsers, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUsers), nil
	}
}

func (g goadminUsersDo) Find() ([]*model.GoadminUsers, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoadminUsers), err
}

func (g goadminUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoadminUsers, err error) {
	buf := make([]*model.GoadminUsers, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminUsersDo) FindInBatches(result *[]*model.GoadminUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminUsersDo) Attrs(attrs ...field.AssignExpr) IGoadminUsersDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminUsersDo) Assign(attrs ...field.AssignExpr) IGoadminUsersDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminUsersDo) Joins(fields ...field.RelationField) IGoadminUsersDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goadminUsersDo) Preload(fields ...field.RelationField) IGoadminUsersDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goadminUsersDo) FirstOrInit() (*model.GoadminUsers, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUsers), nil
	}
}

func (g goadminUsersDo) FirstOrCreate() (*model.GoadminUsers, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoadminUsers), nil
	}
}

func (g goadminUsersDo) FindByPage(offset int, limit int) (result []*model.GoadminUsers, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goadminUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goadminUsersDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goadminUsersDo) Delete(models ...*model.GoadminUsers) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goadminUsersDo) withDO(do gen.Dao) *goadminUsersDo {
	g.DO = *do.(*gen.DO)
	return g
}
